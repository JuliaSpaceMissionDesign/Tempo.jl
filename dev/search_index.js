var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api/#Constants","page":"API","title":"Constants","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Tempo]\nOrder = [:constant]","category":"page"},{"location":"api/#Tempo.DJ2000","page":"API","title":"Tempo.DJ2000","text":"DJ2000\n\nReference epoch (J2000.0), Julian Date (2451545.0).  It is 12:00 01-01-2000.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.DJM0","page":"API","title":"Tempo.DJM0","text":"DJM0\n\nJulian Date of Modified Julian Date zero point (2400000.5). It is 00:00 17-11-1858.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.DMJD","page":"API","title":"Tempo.DMJD","text":"DMJD\n\nReference epoch (J2000.0), Modified Julian Date (51544.5).\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.GPS","page":"API","title":"Tempo.GPS","text":"GPS\n\nThe singleton instance of the GlobalPositioningSystemTime type representing the Global Positioning System Time (GPS) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.J2000","page":"API","title":"Tempo.J2000","text":"J2000\n\nThe singleton instance of the JulianDate2000 epoch origin. \n\nWith this origin, Epoch reference is 2000-01-01T12:00.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.JD","page":"API","title":"Tempo.JD","text":"JD\n\nThe singleton instance of the JulianDate epoch origin. \n\nWith this origin, Epoch reference is -4712-01-01T12:00.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.LEAPSECONDS","page":"API","title":"Tempo.LEAPSECONDS","text":"LEAPSECONDS\n\nLeapseconds data.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.MJD","page":"API","title":"Tempo.MJD","text":"MJD\n\nThe singleton instance of the ModifiedJulianDate epoch origin. \n\nWith this origin, Epoch reference is 1858-11-17T00:00.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.MJD2000","page":"API","title":"Tempo.MJD2000","text":"MJD2000\n\nThe singleton instance of the ModifiedJulianDate2000 epoch origin. \n\nWith this origin, Epoch reference is 2000-01-01T00:00.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.TAI","page":"API","title":"Tempo.TAI","text":"TAI\n\nThe singleton instance of the InternationalAtomicTime type representing the International Atomic Time (TAI) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.TCB","page":"API","title":"Tempo.TCB","text":"TCB\n\nThe singleton instance of the BarycentricCoordinateTime type representing the Barycentric Coordinate Time (TCB) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.TCG","page":"API","title":"Tempo.TCG","text":"TCG\n\nThe singleton instance of the GeocentricCoordinateTime type representing the Geocentric Coordinate Time (TCG) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.TDB","page":"API","title":"Tempo.TDB","text":"TDB\n\nThe singleton instance of the BarycentricDynamicalTime type representing the Barycentric Dynamical Time (TDB) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.TDBH","page":"API","title":"Tempo.TDBH","text":"TDBH\n\nThe singleton instance of the HighPrecisionBarycentricDynamicalTime type representing the High Precision Barycentric Dynamical Time (TDBH) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.TIMESCALES","page":"API","title":"Tempo.TIMESCALES","text":"TIMESCALES\n\nDefault time scales graph, containing at least: (\"TT\", \"TAI\", \"UTC\", \"TCG\", \"TCB\", \"TDB\", \"UT1\", \"TDBH\", \"GPS\")\n\nIt can be easily extended using the @timescale to create new TimeScaleNode  aliases and add_timescale! method to define its relation with the other nodes  in the graph. \n\nExample\n\n# define a new timescale type alias\n@timescale NTS 100 NewTimeScale\n\n# define offset to and from another timescale in the graph \noffset_ffp(seconds) = 1.0\noffset_ftp(seconds) = -1.0\n\n# connect to the graph, with the parent node (TDB in this example)\nadd_timescale!(TIMESCALES, NTS, offset_ffp, parent=TDB, ftp=offset_ftp)\n\n### See also \nSee also [`@timescale`](@ref), [`TimeScaleNode`](@ref) and [`add_timescale`](@ref).\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.TT","page":"API","title":"Tempo.TT","text":"TT\n\nThe singleton instance of the TerrestrialTime type representing the Terrestrial Time (TT) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.UT1","page":"API","title":"Tempo.UT1","text":"UT1\n\nThe singleton instance of the UniversalTime type representing the Universal Time (UT1) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.UTC","page":"API","title":"Tempo.UTC","text":"UTC\n\nThe singleton instance of the CoordinatedUniversalTime type representing the Coordinated Universal Time (UTC) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Tempo]\nOrder = [:type]","category":"page"},{"location":"api/#Tempo.AbstractEpochOrigin","page":"API","title":"Tempo.AbstractEpochOrigin","text":"AbstractEpochOrigin\n\nAbstract type for all epoch origins.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.AbstractTimeScale","page":"API","title":"Tempo.AbstractTimeScale","text":"AbstractTimeScale\n\nAll timescales are subtypes of the abstract type AbstractTimeScale.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.BarycentricCoordinateTime","page":"API","title":"Tempo.BarycentricCoordinateTime","text":"BarycentricCoordinateTime <: AbstractTimeScale\n\nA type representing the Barycentric Coordinate Time (TCB) time scale.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.BarycentricDynamicalTime","page":"API","title":"Tempo.BarycentricDynamicalTime","text":"BarycentricDynamicalTime <: AbstractTimeScale\n\nA type representing the Barycentric Dynamical Time (TDB) time scale.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.CoordinatedUniversalTime","page":"API","title":"Tempo.CoordinatedUniversalTime","text":"CoordinatedUniversalTime <: AbstractTimeScale\n\nA type representing the Coordinated Universal Time (UTC) time scale.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.Date","page":"API","title":"Tempo.Date","text":"Date\n\nA type to represent a calendar date by storing the year, month and day.\n\n\n\nDate(year::Int, month::Int, day::Int)\n\nConstruct a Date object given the year, month and day.\n\n\n\nDate(offset::Integer)\n\nCreate a Date object given an integer number of days since 2000-01-01.\n\n\n\nDate(year::Integer, dayinyear::Integer)\n\nCreate a Date object given the year and the day of the year dayinyear.\n\nExamples\n\njulia> Date(2020, 1)\n2020-01-01\n\njulia> Date(2020, 300)\n2020-10-26\n\n\n\nDate(dt::DateTime)\n\nExtract the Date object from a DateTime structure. \n\nSee also\n\nSee also Time and DateTime.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.DateTime","page":"API","title":"Tempo.DateTime","text":"DateTime{T}\n\nA type wrapping a Date and a Time object.\n\n\n\nDateTime(date::Date, time::Time{T})\n\nConstruct a DateTime object of type T from its Date and Time components.\n\n\n\nDateTime(year::Int, month::Int, day::Int, hour::Int, min::Int, sec::Int, frac::Number)\n\nCreate a DateTime object by parts. \n\n\n\nDateTime(iso::AbstractString)\n\nCreate a DateTime object from by parsing an ISO datetime string iso, in the format  YYYY-MM-DDThh:mm:ss.ffffffff. The DateTime parts not provided in the string will be  assigned default values.\n\nExamples\n\njulia> DateTime(\"2023-05-18T20:14:55.02\")\n2023-05-18T20:14:55.020\n\njulia> Tempo.DateTime(\"2022-05-12\")\n2022-05-12T00:00:00.00\n\n\n\nDateTime(seconds::Number)\n\nCreate a DateTime object given the number of seconds elapsed since J2000.\n\n\n\nDateTime(d::Date, sec::Number)\n\nCreate a DateTime object given a Date and the number of seconds since midnight.\n\nExamples\n\njulia> d = Date(2023, 5, 18)\n2023-05-18\n\njulia> DateTime(d, 0)\n2023-05-18T12:00:00.000\n\njulia> DateTime(d, 1)\n2023-05-18T12:00:01.000\n\nSee also\n\nSee also Date, Time and Epoch.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.DateTime-Tuple{Epoch}","page":"API","title":"Tempo.DateTime","text":"DateTime(e::Epoch)\n\nConstruct a DateTime object from an Epoch.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.Epoch","page":"API","title":"Tempo.Epoch","text":"Epoch{S, T}\n\nA type to represent Epoch-like data. Epochs are internally represented as seconds + fraction of  seconds since a reference epoch, which is considered to be 2000-01-01T12:00:00,  i.e. J2000.\n\n\n\nEpoch(sec::Number, scale::AbstractTimeScale)\nEpoch(sec::Number, scale::Type{<:AbstractTimeScale})\nEpoch{S}(seconds::Number) where {S <: AbstractTimeScale}\n\nCreate an Epoch object from the number of seconds since J2000 with the  timescale S.\n\n\n\nEpoch(dt::DateTime, scale::AbstractTimeScale)\nEpoch(dt::DateTime, scale::Type{<:AbstractTimeScale})\n\nCreate an Epoch object from a DateTime structure with timescale scale.\n\n\n\nEpoch(str::AbstractString, scale::AbstractTimeScale)\nEpoch(str::AbstractString)\n\nCreate an Epoch object from an ISO-formatted string. The timescale can either be  specified as a second argument or written at the end of the string. \n\nThis constructor requires that the str is in the format:\n\nISO – yyyy-mm-ddTHH:MM:SS.ffff : assume J2000 as origin\nJ2000 – DDDD.ffff : parse Julian Date since J2000, in days\nJD – JD DDDDDDDDD.ffffff : parse Julian Date, in days\nMJD – MJD DDDDDDDDD.ffffff : parse a Modified Julian Date, in days\n\nA TimeScale can be added at the end of the string, separated by a whitespace.  If it is not declared, TDB will be used as a default timescale. \n\nExamples\n\n```julia-repl \n\nstandard ISO string\n\njulia> Epoch(\"2050-01-01T12:35:15.0000 TT\") 2050-01-01T12:35:14.9999 TT\n\nstandard ISO string (without scale)\n\njulia> Epoch(\"2050-01-01T12:35:15.0000\") 2050-01-01T12:35:14.9999 TDB\n\nParse Julian Dates\n\njulia> Epoch(\"JD 2400000.5\") 1858-11-17T00:00:00.0000 TDB\n\nParse Modified Julian Dates\n\njulia> Epoch(\"MJD 51544.5\") 2000-01-01T12:00:00.0000 TDB\n\nParse Julian Dates since J2000\n\njulia> Epoch(\"12.0\") 2000-01-13T12:00:00.0000 TDB\n\nAll Julian Date parsers allow timescales\n\njulia> Epoch(\"12.0 TT\") 2000-01-13T12:00:00.0000 TT\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.EpochConversionError","page":"API","title":"Tempo.EpochConversionError","text":"true\n\nA type representing epoch conversion errors.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.GeocentricCoordinateTime","page":"API","title":"Tempo.GeocentricCoordinateTime","text":"GeocentricCoordinateTime <: AbstractTimeScale\n\nA type representing the Geocentric Coordinate Time (TCG) time scale.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.GlobalPositioningSystemTime","page":"API","title":"Tempo.GlobalPositioningSystemTime","text":"GlobalPositioningSystemTime <: AbstractTimeScale\n\nA type representing the Global Positioning System Time (GPS) time scale.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.HighPrecisionBarycentricDynamicalTime","page":"API","title":"Tempo.HighPrecisionBarycentricDynamicalTime","text":"HighPrecisionBarycentricDynamicalTime <: AbstractTimeScale\n\nA type representing the High Precision Barycentric Dynamical Time (TDBH) time scale.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.InternationalAtomicTime","page":"API","title":"Tempo.InternationalAtomicTime","text":"InternationalAtomicTime <: AbstractTimeScale\n\nA type representing the International Atomic Time (TAI) time scale.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.JulianDate","page":"API","title":"Tempo.JulianDate","text":"JulianDate\n\nA type representing the JulianDate (JD) epoch origin. \n\nWith this origin, Epoch reference is -4712-01-01T12:00.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.JulianDate2000","page":"API","title":"Tempo.JulianDate2000","text":"JulianDate2000\n\nA type representing the JulianDate2000 (J2000) epoch origin. \n\nWith this origin, Epoch reference is 2000-01-01T12:00.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.Leapseconds","page":"API","title":"Tempo.Leapseconds","text":"Leapseconds{T}\n\nStores information about the leap seconds that have been added to Coordinated Universal Time  (UTC).\n\nFields\n\nlastupdate: a DatesDateTime object representing the date and time when the Leapseconds    struct was last updated.\njd2000: a vector storing the Julian Date, in days since J2000, of each leap second.\nleap: a vector storing the number of leap seconds at each corresponding entry of the        jd2000 field.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.ModifiedJulianDate","page":"API","title":"Tempo.ModifiedJulianDate","text":"ModifiedJulianDate\n\nA type representing the ModifiedJulianDate (MJD) epoch origin. \n\nWith this origin, Epoch reference is 1858-11-17T00:00.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.ModifiedJulianDate2000","page":"API","title":"Tempo.ModifiedJulianDate2000","text":"ModifiedJulianDate2000\n\nA type representing the ModifiedJulianDate2000 (MJD2000) epoch origin. \n\nWith this origin, Epoch reference is 2000-01-01T00:00.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.TerrestrialTime","page":"API","title":"Tempo.TerrestrialTime","text":"TerrestrialTime <: AbstractTimeScale\n\nA type representing the Terrestrial Time (TT) time scale.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.Time","page":"API","title":"Tempo.Time","text":"Time{T}\n\nA type representing the time of the day storing the hour, minute, seconds and fraction  of seconds.\n\n\n\nTime(hour::Int, minute::Int, second::Int, fraction::T) where {T <: Number}\n\nCreate a Time object of type T.\n\n\n\nTime(hour::Int, minute::Int, second::Number)\n\nConstruct a Time object given the hour, minute and seconds. In this case, the  seconds can either be an integer or a floating point number. The fraction of seconds will be computed under the hood.\n\n\n\nTime(secondinday::Int, fraction::Number)\nTime(secondinday::Number)\n\nCreate a Time object given the seconds of the day secondinday and/or the fraction of  seconds. \n\n\n\nTime(dt::DateTime)\n\nExtract the Time object from a DateTime structure. \n\nSee also\n\nSee also Date and DateTime.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.TimeScaleNode","page":"API","title":"Tempo.TimeScaleNode","text":"TimeScaleNode{T} <: AbstractGraphNode\n\nDefine a timescale.\n\nFields\n\nname – timescale name\nid – timescale identification number (ID)\nparentid – ID of the parent timescale\nffp – offest function from the parent timescale\nftp – offset function to the parent timescale\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.TimeSystem","page":"API","title":"Tempo.TimeSystem","text":"TimeSystem{T}\n\nA TimeSystem object manages a collection of default and user-defined TimeScaleNode objects, enabling efficient time transformations between them. It leverages a  MappedDiGraph to keep track of the relationships between the timescales.\n\n\n\nTimeSystem{T}()\n\nCreate a empty TimeSystem object with datatype T.\n\nExamples\n\njulia> ts = TimeSystem{Float64}();\n\njulia> @timescale TSA 100 TimeScaleA\n\njulia> @timescale TSB 200 TimeScaleB\n\njulia> add_timescale!(ts, TSA)\n\njulia> offset_tsa2tsb(seconds) = 1.0\n\njulia> offset_tsb2tsa(seconds) = -1.0\n\njulia> add_timescale!(ts, TSB, offset_tsa2tsb; parent=TSA, ftp=offset_tsb2tsa)\n\nSee also\n\nSee also @timescale and add_timescale!.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.UniversalTime","page":"API","title":"Tempo.UniversalTime","text":"UniversalTime <: AbstractTimeScale\n\nA type representing the Universal Time (UT1) time scale.\n\n\n\n\n\n","category":"type"},{"location":"api/#Types-2","page":"API","title":"Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Tempo]\nOrder = [:function]","category":"page"},{"location":"api/#Base.convert-Union{Tuple{S2}, Tuple{S1}, Tuple{S2, Epoch{S1}}} where {S1<:Tempo.AbstractTimeScale, S2<:Tempo.AbstractTimeScale}","page":"API","title":"Base.convert","text":"convert(to::S2, e::Epoch{S1}; system::TimeSystem=TIMESCALES)\n\nConvert Epoch with timescale S1 to S2. Allows to use the default TimeSystem or  a custom constructed one. \n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.add_timescale!-Union{Tuple{T}, Tuple{TimeSystem{T}, Tempo.AbstractTimeScale}, Tuple{TimeSystem{T}, Tempo.AbstractTimeScale, Function}} where T","page":"API","title":"Tempo.add_timescale!","text":"add_timescale!(system::TimeSystem, scale::AbstractTimeScale, ffp::Function; ftp, parent)\n\nAdd scale as a timescale to system. A custom function ffp providing the time offset,  in seconds, between the parent scale and the current scale must be provided by the user. \n\nThe parent and ffp arguments are unneeded only for the root timescale. If the user  wishes to add a scale to a non-empty timesystem, this argument becomes mandatory.\n\nThe input functions must accept only the seconds in the parent scale as argument and must  return a single numerical output. An optional function ftp, with a similar interface, returning the offset from the current to the parent scale may also be provided. \n\nnote: Note\nIf ftp is not provided, the reverse timescale transformation will not be possible. \n\nExamples\n\n```julia-repl julia> SYSTEM = TimeSystem{Float64}();\n\njulia> @timescale RTS 102 RootTimeScale\n\njulia> @timescale CTS 103 ChildTimeScale\n\njulia> roottochild(x::Number) = 13.3;\n\njulia> childtoroot(x::Number) = -13.3;\n\njulia> add_timescale!(SYSTEM, RTS)\n\njulia> addtimescale!(SYSTEM, CTS, roottochild; parent=RTS, ftp=childto_root)\n\nSee also\n\nSee also @timescale, TimeSystem and apply_offsets.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.add_timescale!-Union{Tuple{T}, Tuple{TimeSystem{T}, Tempo.TimeScaleNode{T}}} where T","page":"API","title":"Tempo.add_timescale!","text":"add_timescale!(s::TimeSystem, ts::TimeScaleNode)\n\nRegister a new node in the TimeSystem.\n\nwarning: Warning\nThis is a low-level function and should not be called by the user.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.cal2jd-Tuple{Date}","page":"API","title":"Tempo.cal2jd","text":"cal2jd(d::Date)\n\nConvert Gregorian calendar Date to a Julian Date, in days.\n\nOutputs\n\nj2000 – J2000 zero point: always 2451545\nd – J2000 Date for 12 hrs\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.cal2jd-Tuple{Integer, Integer, Integer}","page":"API","title":"Tempo.cal2jd","text":"cal2jd(year::Integer, month::Integer, day::Integer)\n\nThis function converts a given date in the Gregorian calendar (year, month, day) to the  corresponding two-parts Julian Date. The first part is the DJ2000, while the  second output is the number of days since J2000.\n\nThe year must be greater than 1583, and the month must be between 1 and 12. The day must  also be valid, taking into account whether the year is a leap year. If the input year or  month or day are invalid, a DomainError is thrown.\n\nExamples\n\njulia> Tempo.cal2jd(2021, 1, 1)\n(2.4000005e6, 59215.0)\n\njulia> Tempo.cal2jd(2022, 2, 28)\n(2.4000005e6, 59638.0)\n\njulia> Tempo.cal2jd(2019, 2, 29)\nERROR: DomainError with 29:\nthe day shall be between 1 and 28.\n\nReferences\n\nSeidelmann P. K., (1992), Explanatory Supplement to the Astronomical Almanac,   University Science Books, Section 12.92 (p604).\nKlein, A., (2006), A Generalized Kahan-Babuska-Summation-Algorithm.   Computing, 76, 279-293, Section 3.\nERFA software library\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.calhms2jd-Union{Tuple{N}, Tuple{I}, Tuple{I, I, I, I, I, N}} where {I<:Integer, N<:Number}","page":"API","title":"Tempo.calhms2jd","text":"calhms2jd(year, month, day, hour, minute, seconds)\n\nConvert Gregorian Calendar date and time to a two-parts Julian Date. The first part  is the DJ2000, while the second output is the number of days since J2000.\n\nExamples\n\njulia> Tempo.calhms2jd(2000, 1, 1, 12, 0, 0)\n(2.451545e6, 0.0)\n\njulia> Tempo.calhms2jd(2022, 1, 1, 0, 0, 0)\n(2.451545e6, 8035.5)\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.day-Tuple{DateTime}","page":"API","title":"Tempo.day","text":"day(d::DateTime)\n\nGet day associated to a DateTime type.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.day-Tuple{Date}","page":"API","title":"Tempo.day","text":"day(d::Date)\n\nGet day associated to a Date.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.fd2hms-Tuple{Number}","page":"API","title":"Tempo.fd2hms","text":"fd2hms(fd::Number)\n\nConvert the day fraction fd to hour, minute and seconds.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.fd2hmsf-Tuple{Number}","page":"API","title":"Tempo.fd2hmsf","text":"fd2hmsf(fd::Number)\n\nConvert the day fraction fd to hour, minute, second and fraction of seconds.\n\nExamples\n\njulia> Tempo.fd2hms(0.5)\n(12, 0, 0.0)\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.find_day-Tuple{Integer, Integer, Bool}","page":"API","title":"Tempo.find_day","text":"find_day(dayinyear::Integer, month::Integer, isleap::Bool)\n\nFind the day of the month from the day in the year and the month, depending on whether the  year is leap or not.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.find_dayinyear-Tuple{Date}","page":"API","title":"Tempo.find_dayinyear","text":"find_dayinyear(d::Date)\n\nFind the day in the year.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.find_dayinyear-Tuple{Integer, Integer, Bool}","page":"API","title":"Tempo.find_dayinyear","text":"find_dayinyear(month::Integer, day::Integer, isleap::Bool)\n\nFind the day of the year given the month, the day of the month and whether the year  is leap or not.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.find_month-Tuple{Integer, Bool}","page":"API","title":"Tempo.find_month","text":"find_month(dayinyear::Integer, isleap::Bool)\n\nFind the month from the day of the year, depending on whether the year is leap or not.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.find_year-Tuple{Integer}","page":"API","title":"Tempo.find_year","text":"find_year(d::Integer)\n\nReturn the Gregorian year associated to the given Julian Date day d since J2000.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.fraction_of_day-Tuple{Time}","page":"API","title":"Tempo.fraction_of_day","text":"fraction_of_day(t::Time)\nhms2fd(t::Time)\n\nFind the fraction of the day.\n\nExample\n\njulia> t = Time(12, 30, 40.3424)\n12:30:40.3423\n\njulia> Tempo.fraction_of_day(t)\n0.5213002592592593\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.fraction_of_second-Tuple{DateTime}","page":"API","title":"Tempo.fraction_of_second","text":"fraction_of_second(d::DateTime)\n\nGet the fraction of seconds associated to a DateTime object.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.fraction_of_second-Tuple{Time}","page":"API","title":"Tempo.fraction_of_second","text":"fraction_of_second(t::Time)\n\nFind the fraction of seconds.\n\nExample\n\njulia> t = Time(12, 30, 40.3424)\n12:30:40.3423\n\njulia> Tempo.fraction_of_second(t)\n0.3423999999999978\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.get_leapseconds-Tuple{}","page":"API","title":"Tempo.get_leapseconds","text":"get_leapseconds()\n\nParse leapseconds data and return a Leapseconds type. \n\nnote: Note\nThe leapsecond kernel is retrieved from the artifacts of this package. This artifact  will be updated whenever a new leapsecond is added.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.hms2fd-Tuple{Integer, Integer, Number}","page":"API","title":"Tempo.hms2fd","text":"hms2fd(hour::Integer, minute::Integer, second::Number)\n\nConvert hours, minutes and seconds to day fraction.\n\nExamples\n\n```julia-repl julia> Tempo.hms2fd(12, 0.0, 0.0) 0.5\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.hour-Tuple{DateTime}","page":"API","title":"Tempo.hour","text":"hour(d::DateTime)\n\nGet hour associated to a DateTime type.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.hour-Tuple{Time}","page":"API","title":"Tempo.hour","text":"hour(t::Time)\n\nGet the current hour.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.isleapyear-Tuple{Date}","page":"API","title":"Tempo.isleapyear","text":"isleapyear(d::Date)\n\nTrue if Date is within a leap year.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.isleapyear-Tuple{Integer}","page":"API","title":"Tempo.isleapyear","text":"isleapyear(year::Integer)\n\nReturn true if the given Gregorian year is leap.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.j2000-Tuple{Any}","page":"API","title":"Tempo.j2000","text":"j2000(jd)\nj2000(jd1, jd2)\n\nConvert Julian Date in days since J2000\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.j2000-Tuple{DateTime}","page":"API","title":"Tempo.j2000","text":"j2000(dt::DateTime)\n\nConvert a DateTime dt in Julian days since J2000.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.j2000-Tuple{Date}","page":"API","title":"Tempo.j2000","text":"j2000(d::Date)\n\nConvert Gregorian calendar date Date to a Julian Date since J2000,  in days.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.j2000-Tuple{Epoch}","page":"API","title":"Tempo.j2000","text":"j2000(e::Epoch)\n\nConvert Epoch in Julian Date days since J2000.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.j2000c-Tuple{Any}","page":"API","title":"Tempo.j2000c","text":"j2000c(jd)\nj2000c(jd1, jd2)\n\nConvert Julian Date (in days) to Julian Centuries\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.j2000c-Tuple{DateTime}","page":"API","title":"Tempo.j2000c","text":"j2000c(dt::DateTime)\n\nConvert  a DateTime dt in a Julian Date since J2000, in centuries.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.j2000c-Tuple{Epoch}","page":"API","title":"Tempo.j2000c","text":"j2000c(e::Epoch)\n\nConvert Epoch in Julian Date centuries since J2000.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.j2000s-Tuple{Any}","page":"API","title":"Tempo.j2000s","text":"j2000s(jd)\nj2000s(jd1, jd2)\n\nConvert Julian Date (in days) in seconds past J2000 \n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.j2000s-Tuple{DateTime}","page":"API","title":"Tempo.j2000s","text":"j2000s(dt::DateTime)\n\nConvert a DateTime dt to seconds since J2000.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.j2000s-Tuple{Epoch}","page":"API","title":"Tempo.j2000s","text":"j2000s(e::Epoch)\n\nConvert Epoch in Julian Date seconds since J2000.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.jd2cal-Tuple{Number, Number}","page":"API","title":"Tempo.jd2cal","text":"jd2cal(dj1::Number, dj2::Number)\n\nThis function converts a given Julian Date (JD) to a Gregorian calendar date  (year, month, day, and fraction of a day).\n\nExamples\n\njulia> Tempo.jd2cal(DJ2000, 0.0)\n(2000, 1, 1, 0.5)\n\njulia> Tempo.jd2cal(DJ2000, 365.5)\n(2001, 1, 1, 0.0)\n\njulia> Tempo.jd2cal(DJ2000 + 365, 0.5)\n(2001, 1, 1, 0.0)\n\nnote: Note\nThe Julian Date is apportioned in any convenient way between the arguments  dj1 and dj2. For example, JD = 2450123.7 could be expressed in any of these  ways, among others:dj1 dj2 \n2450123.7 0.0 (JD method)\n2451545.0 -1421.3 (J2000 method)\n2400000.5 50123.2 (MJD method)\n2450123.5 0.2 (date & time method)\n\nwarning: Warning\nThe earliest valid date is -68569.5 (-4713 Jan 1). The largest value accepted is 1e9.\n\nReferences\n\nSeidelmann P. K., (1992), Explanatory Supplement to the Astronomical Almanac,   University Science Books, Section 12.92 (p604).\nKlein, A., (2006), A Generalized Kahan-Babuska-Summation-Algorithm.   Computing, 76, 279-293, Section 3.\nERFA software library\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.jd2calhms-Tuple{Number, Number}","page":"API","title":"Tempo.jd2calhms","text":"jd2calhms(dj1::Number, dj2::Number)\n\nConvert a two-parts Julian Date to Gregorian year, month, day, hour, minute, seconds. See  jd2cal for more information on the Julian Date composition. \n\njulia> Tempo.jd2calhms(DJ2000, 0.0)\n(2000, 1, 1, 12, 0, 0.0)\n\njulia> Tempo.jd2calhms(DJ2000 + 1, 0.25)\n(2000, 1, 2, 18, 0, 0.0)\n\njulia> Tempo.jd2calhms(DJ2000, 1.25)\n(2000, 1, 2, 18, 0, 0.0)\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.lastj2000dayofyear-Tuple{Integer}","page":"API","title":"Tempo.lastj2000dayofyear","text":"lastj2000dayofyear(year::Integer)\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.leapseconds-Tuple{Number}","page":"API","title":"Tempo.leapseconds","text":"leapseconds(jd2000::Number)\n\nFor a given UTC date, in Julian days since J2000, calculate Delta(AT) = TAI - UTC.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.minute-Tuple{DateTime}","page":"API","title":"Tempo.minute","text":"minute(d::DateTime)\n\nGet minute associated to a DateTime type.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.minute-Tuple{Time}","page":"API","title":"Tempo.minute","text":"minute(t::Time)\n\nGet the current minute.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.month-Tuple{DateTime}","page":"API","title":"Tempo.month","text":"month(d::DateTime)\n\nGet month associated to a DateTime type.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.month-Tuple{Date}","page":"API","title":"Tempo.month","text":"month(d::Date)\n\nGet month associated to a Date.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.offset-Tuple{JulianDate2000}","page":"API","title":"Tempo.offset","text":"offset(::JulianDate2000)\n\nOffset in days to shift J2000 epochs (with origin at 2000-01-01T12:00)  to JulianDate2000 (with origin at 2000-01-01T12:00)\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.offset-Tuple{JulianDate}","page":"API","title":"Tempo.offset","text":"offset(::JulianDate)\n\nOffset in days to shift J2000 epochs (with origin at 2000-01-01T12:00)  to JulianDate (with origin at -4712-01-01T12:00)\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.offset-Tuple{ModifiedJulianDate2000}","page":"API","title":"Tempo.offset","text":"offset(::ModifiedJulianDate2000)\n\nOffset in days to shift J2000 epochs (with origin at 2000-01-01T12:00)  to ModifiedJulianDate2000 (with origin at 2000-01-01T00:00)\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.offset-Tuple{ModifiedJulianDate}","page":"API","title":"Tempo.offset","text":"offset(::ModifiedJulianDate)\n\nOffset in days to shift J2000 epochs (with origin at 2000-01-01T12:00)  to ModifiedJulianDate (with origin at 1858-11-17T00:00)\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.offset_gps2tai-Tuple{Any}","page":"API","title":"Tempo.offset_gps2tai","text":"offset_gps2tai(seconds)\n\nReturn the fixed offset between GPS and TAI in seconds.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.offset_tai2gps-Tuple{Any}","page":"API","title":"Tempo.offset_tai2gps","text":"offset_tai2gps(seconds)\n\nReturn the fixed offset between TAI and GPS in seconds.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.offset_tai2tt-Tuple{Any}","page":"API","title":"Tempo.offset_tai2tt","text":"offset_tai2tt(seconds)\n\nReturn the fixed offset between TAI and TT in seconds.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.offset_tai2utc-Tuple{Any}","page":"API","title":"Tempo.offset_tai2utc","text":"offset_tai2utc(seconds)\n\nReturn the offset between TAI and UTC in seconds.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.offset_tcb2tdb-Tuple{Any}","page":"API","title":"Tempo.offset_tcb2tdb","text":"offset_tcb2tdb(seconds)\n\nReturn the linear offset between TCB and TDB in seconds.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.offset_tcg2tt-Tuple{Any}","page":"API","title":"Tempo.offset_tcg2tt","text":"offset_tcg2tt(seconds)\n\nReturn the linear offset between TCG and TT in seconds.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.offset_tdb2tcb-Tuple{Any}","page":"API","title":"Tempo.offset_tdb2tcb","text":"offset_tdb2tcb(seconds)\n\nReturn the linear offset between TDB and TCB in seconds.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.offset_tdb2tt-Tuple{Any}","page":"API","title":"Tempo.offset_tdb2tt","text":"offset_tdb2tt(seconds)\n\nReturn the offset between TDB and TT in seconds. This routine is accurate to ~40 microseconds over the interval 1900-2100.\n\nnote: Note\nAn accurate transformation between TDB and TT depends on the trajectory of the observer.  For two observers fixed on Earth's surface the quantity TDB-TT can differ by as much  as ~4 microseconds.\n\nReferences\n\nhttps://www.cv.nrao.edu/~rfisher/Ephemerides/times.html#TDB\nIssue #26\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.offset_tt2tai-Tuple{Any}","page":"API","title":"Tempo.offset_tt2tai","text":"offset_tt2tai(seconds)\n\nReturn the fixed offset between TT and TAI in seconds.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.offset_tt2tcg-Tuple{Any}","page":"API","title":"Tempo.offset_tt2tcg","text":"offset_tt2tcg(seconds)\n\nReturn the linear offset between TT and TCG in seconds.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.offset_tt2tdb-Tuple{Any}","page":"API","title":"Tempo.offset_tt2tdb","text":"offset_tt2tdb(seconds)\n\nReturn the offset between TT and TDB in seconds. This routine is accurate to ~40 microseconds over the interval 1900-2100.\n\nnote: Note\nAn accurate transformation between TDB and TT depends on the trajectory of the observer.  For two observers fixed on Earth's surface the quantity TDB-TT can differ by as much  as ~4 microseconds.\n\nReferences\n\nhttps://www.cv.nrao.edu/~rfisher/Ephemerides/times.html#TDB\nIssue #26\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.offset_tt2tdbh-Tuple{Any}","page":"API","title":"Tempo.offset_tt2tdbh","text":"offset_tt2tdbh(seconds)\n\nReturn the offset between TT and TDBH in seconds.\n\nThe maximum error in using the above formula is about 10 µs from 1600 to 2200. For even more precise applications, the series expansion by  Harada & Fukushima (2003) is recommended.\n\nReferences\n\nThe IAU Resolutions on Astronomical Reference Systems, Time Scales, and Earth Rotation Models,   United States Naval Observatory, https://arxiv.org/pdf/astro-ph/0602086.pdf\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.offset_utc2tai-Tuple{Any}","page":"API","title":"Tempo.offset_utc2tai","text":"offset_utc2tai(seconds)\n\nReturn the offset between UTC and TAI in seconds.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.parse_iso-Tuple{AbstractString}","page":"API","title":"Tempo.parse_iso","text":"parse_iso(s::AbstractString)\n\nParse an ISO datetime string, in the format YYYY-MM-DDThh:mm:ss.ffffffff and return  a Tuple containing the year, month, day , hour, minute, second and milliseconds. If the  string format is not recognised as ISO, an ArgumentError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.second-Tuple{Type{<:AbstractFloat}, Time}","page":"API","title":"Tempo.second","text":"second(::Type{<:AbstractFloat}, t::Time)\nsecond(::Type{<:Integer}, t::Time)\nsecond(t::Time)\n\nGet the current second.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.second-Union{Tuple{T}, Tuple{Type{T}, DateTime}} where T","page":"API","title":"Tempo.second","text":"second(::Type{<:AbstractFloat}, t::Time)\nsecond(d::DateTime)\n\nGet the seconds associated to a DateTime type. If a floating-point type is given  as first argument, the returned value will also account for the fraction of seconds.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.second_in_day-Tuple{Time}","page":"API","title":"Tempo.second_in_day","text":"second_in_day(t::Time)\n\nFind the second in the day.\n\nExample\n\njulia> t = Time(12, 30, 40.3424)\n12:30:40.3423\n\njulia> Tempo.second_in_day(t)\n45040.3424\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.tai2utc-Tuple{Any, Any}","page":"API","title":"Tempo.tai2utc","text":"tai2utc(tai1, tai2)\n\nTransform a 2-part (quasi) Julian Date, in days, in International Atomic Time, TAI  to a 2-part Julian Date in the Coordinated Universal Time, UTC, scale.\n\nnote: Note\ntai1 + tai2 is Julian Date, apportioned in any convenient way between the two arguments, for example such that tai1 is the Julian Day Number and tai2 is the fraction of a day.  The returned utc1  and utc2 form an analogous pair.\n\nnote: Note\nJD cannot unambiguously represent UTC during a leap second unless special measures are taken.  The convention in the present function is that the JD day represents UTC days whether the length is 86399, 86400 or 86401 SI seconds.  \n\nReferences\n\nSeidelmann P. K., (1992), Explanatory Supplement to the Astronomical Almanac,   University Science Books, Section 12.92 (p604).\nMcCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),   IERS Technical Note No. 32, BKG (2004)\nERFA software library\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.timescale-Tuple{Epoch}","page":"API","title":"Tempo.timescale","text":"timescale(ep::Epoch)\n\nEpoch timescale.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.timescale_alias-Tuple{Tempo.AbstractTimeScale}","page":"API","title":"Tempo.timescale_alias","text":"timescale_alias(scale::AbstractTimeScale)\n\nReturn the ID associated to scale.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.timescale_id-Tuple{Tempo.AbstractTimeScale}","page":"API","title":"Tempo.timescale_id","text":"timescale_id(scale::AbstractTimeScale)\n\nReturn the ID of scale.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.timescale_name-Tuple{Tempo.AbstractTimeScale}","page":"API","title":"Tempo.timescale_name","text":"timescale_name(scale::AbstractTimeScale)\n\nReturn the name of scale.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.utc2tai-Tuple{Any, Any}","page":"API","title":"Tempo.utc2tai","text":"utc2tai(utc1, utc2)\n\nTransform a 2-part (quasi) Julian Date, in days, in Coordinate Universal Time, UTC  to a 2-part Julian Date in the International Atomic Time, TAI scale.\n\nnote: Note\nutc1 + utc2 is quasi Julian Date (see Note 2), apportioned in any convenient way between the two arguments, for example such that utc1 is the Julian Day Number and utc2 is the fraction of a day.\n\nnote: Note\nJD cannot unambiguously represent UTC during a leap second unless special measures are taken.  The convention in the present function is that the JD day represents UTC days whether the length is 86399, 86400 or 86401 SI seconds.  \n\nReferences\n\nSeidelmann P. K., (1992), Explanatory Supplement to the Astronomical Almanac,   University Science Books, Section 12.92 (p604).\nMcCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),   IERS Technical Note No. 32, BKG (2004)\nERFA software library\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.value-Tuple{Epoch}","page":"API","title":"Tempo.value","text":"value(ep::Epoch)\n\nFull Epoch value.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.year-Tuple{DateTime}","page":"API","title":"Tempo.year","text":"year(d::DateTime)\n\nGet year associated to a DateTime type.\n\n\n\n\n\n","category":"method"},{"location":"api/#Tempo.year-Tuple{Date}","page":"API","title":"Tempo.year","text":"year(d::Date)\n\nGet year associated to a Date.\n\n\n\n\n\n","category":"method"},{"location":"api/#Macros","page":"API","title":"Macros","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Tempo]\nOrder = [:macro]","category":"page"},{"location":"api/#Tempo.@timescale","page":"API","title":"Tempo.@timescale","text":"@timescale(name, id, type)\n\nCreate a new timescale instance to alias the given id. This macro creates an  AbstractTimeScale subtype and its singleton instance called name. Its type  is obtained by appending TimeScale to name if it was not provided.\n\nExamples\n\njulia> @timescale NTS 100 NewTimeScale \n\njulia> typeof(NTS)\nNewTimeScale \n\njulia> timescale_alias(NTS)\n100\n\njulia> @timescale TBH 200\n\njulia> typeof(TBH)\nTBHTimeScale\n\njulia> timescale_alias(TBH)\n200\n\nSee also\n\nSee also timescale_alias and add_timescale!.\n\n\n\n\n\n","category":"macro"},{"location":"tutorials/t01_epochs/#tutorial_01_epochs","page":"Epochs","title":"Epoch handling and timescales conversions","text":"","category":"section"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"using Tempo","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"In this tutorial, the general workflow to be followed when dealing with time representations and their transformations is presented.","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"The first step is to load the module:","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"using Tempo","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"This package contains the basic routines needed to handle Epochs and their transformations  as well as some additional types to represent Dates, Time and DateTime objects.","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"Then, how and epoch may be represented when using Tempo? ","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"Well, depends on the actual use case.","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"As already said, there are different time representations in Tempo and they do depends on the actual information needed for the particular application. In general, when dealing with space applications, the a time representation shall embed different informations:","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"The representation type (e.g. Gregorian or Julian calendar representation);\nThe origin (e.g. J2000, JD, MJD, ...);\nThe time scale (e.g. TAI, TT, TDB, UTC, UT, ...).","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"These three informations are considered when building an Epoch, which is the most complete time representation available within Tempo and is the one suggested to the user. Then, to  handle such complex time representation, different constructors are available for Epoch and a time transformation system is available. However, there are some assumptions that are considered:","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"The (internal) representation type of Epoch is always exploiting Julian calendar;\nThe (internal) Epoch origin is always J2000, i.e. 01 Jan 2000 at noon;\nThe Epoch timescale could be any of the time transformation system ones.\nThe default timescale is TDB.","category":"page"},{"location":"tutorials/t01_epochs/#Epoch-creation","page":"Epochs","title":"Epoch creation","text":"","category":"section"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"To create a new Epoch object, there are different ways:","category":"page"},{"location":"tutorials/t01_epochs/#From-a-ISO-string-(without-scale):","page":"Epochs","title":"From a ISO string (without scale):","text":"","category":"section"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e = Epoch(\"2022-01-02T06:30:00.0\")","category":"page"},{"location":"tutorials/t01_epochs/#From-ISO-string-(with-scale):","page":"Epochs","title":"From ISO string (with scale):","text":"","category":"section"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e = Epoch(\"2022-01-02T06:30:00.0 TT\")","category":"page"},{"location":"tutorials/t01_epochs/#From-a-(partial)-ISO-string:","page":"Epochs","title":"From a (partial) ISO string:","text":"","category":"section"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e = Epoch(\"2020-01-01\")","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e = Epoch(\"2021-01-30T01\")","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e = Epoch(\"2022-06-12 UTC\")","category":"page"},{"location":"tutorials/t01_epochs/#From-a-Julian-date:","page":"Epochs","title":"From a Julian date:","text":"","category":"section"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e = Epoch(\"JD 2451545.0\")","category":"page"},{"location":"tutorials/t01_epochs/#From-a-Modified-Julian-date:","page":"Epochs","title":"From a Modified Julian date:","text":"","category":"section"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e = Epoch(\"MJD 51544.5\")","category":"page"},{"location":"tutorials/t01_epochs/#From-Julian-days-since-J2000:","page":"Epochs","title":"From Julian days since J2000:","text":"","category":"section"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e = Epoch(\"9.0 TT\")","category":"page"},{"location":"tutorials/t01_epochs/#From-seconds-since-J2000:","page":"Epochs","title":"From seconds since J2000:","text":"","category":"section"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e = Epoch(60.0, TAI)","category":"page"},{"location":"tutorials/t01_epochs/#From-DateTime:","page":"Epochs","title":"From DateTime:","text":"","category":"section"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"dt = DateTime(2001, 6, 15, 0, 0, 0, 0.0)\ne = Epoch(dt, TT)","category":"page"},{"location":"tutorials/t01_epochs/#Epoch-transformations","page":"Epochs","title":"Epoch transformations","text":"","category":"section"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"The epoch transformations are allowed by means of a directed graph of timescales available in Tempo. While the offset_xxx functions provides the offsets in seconds between two timescales  (e.g. offset_tai2tt provide the offset in seconds to convert from TAI to TT), there is a simple, effective and efficient entrypoint to all time transformations: the convert method.","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e = Epoch(90.0, TT)\n# Convert to TAI\neTAI = convert(TAI, e)","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"Note that e time transformation system is a directed graph! To allow to transform back and forth a given timescale, two transformations are necessary. An error will be displayed in case a  single transformation is assigned and the reverse one is called. ","category":"page"},{"location":"#Tempo.jl","page":"Home","title":"Tempo.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Time transformations in Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Tempo module is thought to be a fast, efficient and precise time transformation library  capable to handle the different transformations needed in the astronomical and astrodynamical  application of the JSMD ecosystem.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are different ways to represent an epoch within Tempo, depending on the specific  application. This section is here to help you choose the proper time representation and to  present the capabilities of the module in transforming time between different representations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"First of all, there is a deep difference in the way time is thought in the everyday life and  when dealing with space-related applications.  Whenever we say the 12:35 of the 1st of January 2023, we are merging three concepts:  the calendar (1st January 2023) and the time representation (12:35) together with its scale.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Calculations in any scientific discipline may involve precise time, but what  sets astronomy apart is the number and variety of time scales that have to be used. In fact, in astronomical applications the physical context of the “clock” matters, whether it is on Earth, moving or stationary, or on a spacecraft.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<figure>\n    <img src=\"https://gitlab.com/astronaut-tools/julia/Documentation/-/raw/390f98f53a0d35a3c0963dff8a5f608ff79304db/docs/src/assets/figures/enciclopedia/timescales.png\" alt=\"Image\" width=\"600\" />\n    <figcaption> Time Conversions - The difference in each timescale is shown with \n    respect to TAI. </figcaption>\n</figure>","category":"page"},{"location":"","page":"Home","title":"Home","text":"The most relevant time scales for these applications are:","category":"page"},{"location":"","page":"Home","title":"Home","text":"UT1 (Universal Time 1): UT1 is a time scale based on the rotation of the Earth.    It is used to measure the positions of celestial objects relative to the Earth's    surface. UT1 is closely related to Greenwich Mean Time (GMT), and the two time    scales are often used interchangeably.\nTAI (International Atomic Time): TAI is a time scale based on the average    frequency of a set of atomic clocks. It is used to measure the positions of    celestial objects relative to the Earth's surface.\nTT (Terrestrial Time): TT is a time scale based on the motion of celestial    objects around the solar system barycenter (the center of mass of the solar system).    It is used to measure the positions of celestial objects relative to the Earth's surface.\nTDB (Barycentric Dynamical Time): TDB is a time scale based on the motion of    celestial objects around the solar system barycenter (the center of mass of the    solar system). It is used to measure the positions of celestial objects relative    to the solar system barycenter.\nTCB (Barycentric Coordinate Time): TCB is a time scale based on the motion of    celestial objects around the solar system barycenter (the center of mass of the    solar system). It is used to measure the positions of celestial objects relative    to the solar system barycenter.\nTCG (Geocentric Coordinate Time): TCG is a time scale based on the rotation of    the Earth. It is used to measure the positions of celestial objects relative to the    Earth's surface.\nTeph (Ephemeris Time): Teph is a time scale based on the motion of celestial    objects around the solar system barycenter (the center of mass of the solar    system). It is used to measure the positions of celestial objects relative to    the solar system barycenter – here considered equivalent of TDB.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Of the seven time scales to be described here, one is atomic time (TAI),  one is solar time (UT1), one is an atomic/solar hybrid (UTC) and four are  dynamical times (TT, TCG, TCB, TDB). Other time scales of interest may also be the  ones associated to the different positioning systems. In particular: GPS (Global  Positioning System), GLONASS (Global Navigation Satellite System) and GALILEO  (Global Navigation Satellite System) times could be defined as a constant offset with respect to TAI.","category":"page"},{"location":"#Time-in-JSMD","page":"Home","title":"Time in JSMD","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Within Tempo, the way in which time is represented in Tempo is through the use of  Epochs. Epochs are an efficient, differentiable and precise way to represent  astronomical time. To parse an epoch object, two parameters shall be assigned:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Timescale: This parameter determines the timescale that the epoch is based on.    For example, it can be set to UTC, TAI, TDB, or TCB. This allows the user to convert    the epoch between different timescales if necessary.\nOrigin: This parameter determines the origin of the epoch, which is the point in time    from which the epoch is measured. This can be in the form of a Julian date, a   Modified Julian date or any user-defined origin.    The origin can also be set to a specific event, such as J2000.0 or B1950.0.","category":"page"},{"location":"","page":"Home","title":"Home","text":"By assigning these two parameters, Epochs can be used to represent time in a precise  manner, which is crucial for accurate timekeeping and coordination of events in a universe model.","category":"page"},{"location":"tutorials/t02_scales/#tutorial_02_scales","page":"Scales","title":"Timescales graphs and extensions","text":"","category":"section"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"In Tempo, timescales are connected each other via a directed graph. Thanks to the  structure of the Tempo module, it is possible to either extend the current graph of  scales or create a completely custom one. Both of this possibilities are the subject of  this tutorial.","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"using Tempo","category":"page"},{"location":"tutorials/t02_scales/#Create-a-timescales-graph","page":"Scales","title":"Create a timescales graph","text":"","category":"section"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"To create a computational directed graph to handle timescales, Tempo provides the TimeSystem type. Therefore, let us define a new time transformation system called TIMETRANSF:","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"const TIMETRANSF = TimeSystem{Float64}()","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"TimeSystem{Float64}(MultiGraphs.MappedNodeGraph{Tempo.TimeScaleNode{Float64}, Graphs.SimpleGraphs.SimpleDiGraph{Int64}}(Graphs.SimpleGraphs.SimpleDiGraph{Int64}(0, Vector{Int64}[], Vector{Int64}[]), Dict{Int64, Int64}(), Tempo.TimeScaleNode{Float64}[], Dict{Int64, Dict{Int64, Vector{Int64}}}(), Dict{Int64, Dict{Int64, Int64}}()))","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"This object contains a graph and the properties associated to the new time-system defined in TIMETRANSF. Note that the computational graph at the moment is empty, thus, we need to  manually populate it with the new transformations.","category":"page"},{"location":"tutorials/t02_scales/#Create-a-new-timescale","page":"Scales","title":"Create a new timescale","text":"","category":"section"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"In order to insert a new timescale to the graph, a new timescale type alias shall be defined. This can be easily done via the macro @timescale. This step requires 3 elements:","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"The timescale acronym (user-defined).\nThe timescale index (it is an Int used to uniquely represent the timescale).\nThe timescale fullname.","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"@timescale DTS 1 DefaultTimeScale","category":"page"},{"location":"tutorials/t02_scales/#Register-the-new-timescale","page":"Scales","title":"Register the new timescale","text":"","category":"section"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"Once, created, the new timescale is ready to be registered. If it is the first scale registered in the computational graph, than, nothing else than the type alias is needed and the  registration can be performed as follows:","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"add_timescale!(TIMETRANSF, DTS)","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"TIMETRANSF.scales.nodes","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"1-element Vector{Tempo.TimeScaleNode{Float64}}:\n TimeScaleNode{Float64}(name=DTS, id=1)","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"Instead, in case the timescale is linked to a parent one, an offset function shall be defined. Remember that the computational graph is directed, i.e. the transformation to go back and  forth to the parent shall be defined if two-way transformations are desired.","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"In this example, assume we want to register timescale NTSA and a timescale NTSB.  NTSA has DTS as parent and a constant offset of 1 second. NTSB has NTSA has parent  and a linear offset with slope of 1/86400.","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"Then, first create the new scales:","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"@timescale NTSA 2 NewTimeScaleA\n@timescale NTSB 3 NewTimeScaleB","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"Now, let us define the offset functions for NTSA:","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"const OFFSET_DTS_TO_NTSA = 1.0\n@inline offset_dts2ntsa(sec::Number) = OFFSET_DTS_TO_NTSA\n@inline offset_ntsa2dts(sec::Number) = -OFFSET_DTS_TO_NTSA;","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"We can now register NTSA to the computational graph using the add_timescale! method:","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"add_timescale!(TIMETRANSF, NTSA, offset_dts2ntsa, parent=DTS, ftp=offset_ntsa2dts)","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"Now, if we have a look to the computational graph, we'll se that NTSA is registered:","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"TIMETRANSF.scales.nodes","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"2-element Vector{Tempo.TimeScaleNode{Float64}}:\n TimeScaleNode{Float64}(name=DTS, id=1)\n\n TimeScaleNode{Float64}(name=NTSA, id=2, parent=1)","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"As well as, since we have registered both direct and inverse transformations, there is the  possibility to transform back and forth from NTSA to DTS. We can easily see this looking at the paths contained in the computational graph. Here the timescale are represented by means of the type-alias unique integer assigned during the creation of the new type. ","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"TIMETRANSF.scales.paths","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"Dict{Int64, Dict{Int64, Vector{Int64}}} with 2 entries:\n  2 => Dict(1=>[2, 1])\n  1 => Dict(2=>[1, 2])","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"If now we create a DTS epoch, it is possible to use the custom time transformation system to convert to NTSA:","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"# Create the new epoch \n# IMPORTANT: only J2000 seconds Epoch parser works with custom timescales.\ne = Epoch(0.0, DTS)","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"2000-01-01T12:00:00.000 DTS","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"# Call `convert` using the custom time transformation system \nconvert(NTSA, e, system=TIMETRANSF)","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"2000-01-01T12:00:01.000 NTSA","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"note: Note\nThe system is an optimal output if the Tempo time transformation system is used.","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"To conclude the example, NTSB is has to be inserted. Let's assume that only the transformation NTSA -> NTSB can be constructed. Then: ","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"# Create the linear offset function\noffset_ntsa2ntsb(sec::Number) = sec/86400.0\n# Register the timescale to the computational graph\nadd_timescale!(TIMETRANSF, NTSB, offset_ntsa2ntsb, parent=NTSA)","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"Now, let's have a look to the nodes in the graph:","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"TIMETRANSF.scales.nodes","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"3-element Vector{Tempo.TimeScaleNode{Float64}}:\n TimeScaleNode{Float64}(name=DTS, id=1)\n\n TimeScaleNode{Float64}(name=NTSA, id=2, parent=1)\n\n TimeScaleNode{Float64}(name=NTSB, id=3, parent=2)","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"Where the new timescale has been registered with the alias 3. Note however, that from 3 no transformations are available:","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"TIMETRANSF.scales.paths","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"Dict{Int64, Dict{Int64, Vector{Int64}}} with 3 entries:\n  2 => Dict(3=>[2, 3], 1=>[2, 1])\n  3 => Dict(2=>[], 1=>[])\n  1 => Dict(2=>[1, 2], 3=>[1, 2, 3])","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"To conclude, let's test the new time transformation system. Let's take the previous Epoch  translate forward of 2 days and transform to NTSA and NTSB. We should obtain a translation of 1 sec and 3 sec respectively:","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"# Translate the epoch\ne += 2*86400","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"2000-01-03T12:00:00.000 DTS","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"# Convert to `NTSA`\nea = convert(NTSA, e, system=TIMETRANSF)","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"2000-01-03T12:00:01.000 NTSA","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"# Convert to `NTSB`\neb = convert(NTSB, e, system=TIMETRANSF)","category":"page"},{"location":"tutorials/t02_scales/","page":"Scales","title":"Scales","text":"2000-01-03T12:00:03.000 NTSB","category":"page"}]
}
