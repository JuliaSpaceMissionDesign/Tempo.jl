var documenterSearchIndex = {"docs":
[{"location":"#Tempo.jl-API-Reference","page":"Home","title":"Tempo.jl API Reference","text":"","category":"section"},{"location":"#Constants","page":"Home","title":"Constants","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [Tempo]\nOrder = [:constant]","category":"page"},{"location":"#Tempo.DJ2000","page":"Home","title":"Tempo.DJ2000","text":"DJ2000\n\nReference epoch (J2000.0), Julian Date (2451545.0).  It is 12:00 01-01-2000.\n\n\n\n\n\n","category":"constant"},{"location":"#Tempo.DJM0","page":"Home","title":"Tempo.DJM0","text":"DJM0\n\nJulian Date of Modified Julian Date zero point (2400000.5). It is 00:00 17-11-1858.\n\n\n\n\n\n","category":"constant"},{"location":"#Tempo.DMJD","page":"Home","title":"Tempo.DMJD","text":"DMJD\n\nReference epoch (J2000.0), Modified Julian Date (51544.5).\n\n\n\n\n\n","category":"constant"},{"location":"#Tempo.GPS","page":"Home","title":"Tempo.GPS","text":"GPS\n\nThe singleton instance of the GlobalPositioningSystemTime type representing the Global Positioning System Time (GPS) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"#Tempo.J2000","page":"Home","title":"Tempo.J2000","text":"J2000\n\nThe singleton instance of the JulianDate2000 epoch origin. \n\nWith this origin, Epoch reference is 2000-01-01T12:00.\n\n\n\n\n\n","category":"constant"},{"location":"#Tempo.JD","page":"Home","title":"Tempo.JD","text":"JD\n\nThe singleton instance of the JulianDate epoch origin. \n\nWith this origin, Epoch reference is -4712-01-01T12:00.\n\n\n\n\n\n","category":"constant"},{"location":"#Tempo.LEAPSECONDS","page":"Home","title":"Tempo.LEAPSECONDS","text":"LEAPSECONDS\n\nLeapseconds data.\n\n\n\n\n\n","category":"constant"},{"location":"#Tempo.MJ2000","page":"Home","title":"Tempo.MJ2000","text":"MJ2000\n\nThe singleton instance of the ModifiedJulianDate2000 epoch origin. \n\nWith this origin, Epoch reference is 2000-01-01T00:00.\n\n\n\n\n\n","category":"constant"},{"location":"#Tempo.MJD","page":"Home","title":"Tempo.MJD","text":"MJD\n\nThe singleton instance of the ModifiedJulianDate epoch origin. \n\nWith this origin, Epoch reference is 1858-11-17T00:00.\n\n\n\n\n\n","category":"constant"},{"location":"#Tempo.TAI","page":"Home","title":"Tempo.TAI","text":"TAI\n\nThe singleton instance of the InternationalAtomicTime type representing the International Atomic Time (TAI) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"#Tempo.TCB","page":"Home","title":"Tempo.TCB","text":"TCB\n\nThe singleton instance of the BarycentricCoordinateTime type representing the Barycentric Coordinate Time (TCB) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"#Tempo.TCG","page":"Home","title":"Tempo.TCG","text":"TCG\n\nThe singleton instance of the GeocentricCoordinateTime type representing the Geocentric Coordinate Time (TCG) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"#Tempo.TDB","page":"Home","title":"Tempo.TDB","text":"TDB\n\nThe singleton instance of the BarycentricDynamicalTime type representing the Barycentric Dynamical Time (TDB) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"#Tempo.TDBH","page":"Home","title":"Tempo.TDBH","text":"TDBH\n\nThe singleton instance of the HighPrecisionBarycentricDynamicalTime type representing the High Precision Barycentric Dynamical Time (TDBH) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"#Tempo.TIMESCALES","page":"Home","title":"Tempo.TIMESCALES","text":"TIMESCALES\n\nTime scales graph, containing at least: (\"TT\", \"TAI\", \"UTC\", \"TCG\", \"TCB\", \"TDB\", \"UT1\", \"TDBH\", \"GPS\")\n\nIt can be easily extended using the @timescale to create new TimeScaleNode aliases and  add_timescale method to define its relation with the other nodes in the graph. \n\nExample\n\n# define a new timescale type alias\n@timescale NTS 100 NewTimeScale\n\n# define offset to and from another timescale in the graph \noffset_ffp(seconds) = 1.0\noffset_ftp(seconds) = -1.0\n\n# connect to the graph, with the parent node (TDB in this example)\nadd_timescale(TIMESCALES, NTS, offset_ffp, parent=TDB, ftp=offset_ftp)\n\n\n\n\n\n","category":"constant"},{"location":"#Tempo.TT","page":"Home","title":"Tempo.TT","text":"TT\n\nThe singleton instance of the TerrestrialTime type representing the Terrestrial Time (TT) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"#Tempo.UT1","page":"Home","title":"Tempo.UT1","text":"UT1\n\nThe singleton instance of the UniversalTime type representing the Universal Time (UT1) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"#Tempo.UTC","page":"Home","title":"Tempo.UTC","text":"UTC\n\nThe singleton instance of the CoordinatedUniversalTime type representing the Coordinated Universal Time (UTC) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"#Types","page":"Home","title":"Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [Tempo]\nOrder = [:type]","category":"page"},{"location":"#Tempo.AbstractEpochOrigin","page":"Home","title":"Tempo.AbstractEpochOrigin","text":"AbstractEpochOrigin\n\nAbstract type for all epoch origins.\n\n\n\n\n\n","category":"type"},{"location":"#Tempo.AbstractTimeScale","page":"Home","title":"Tempo.AbstractTimeScale","text":"AbstractTimeScale\n\nAll timescales are subtypes of the abstract type AbstractTimeScale.\n\n\n\n\n\n","category":"type"},{"location":"#Tempo.BarycentricCoordinateTime","page":"Home","title":"Tempo.BarycentricCoordinateTime","text":"BarycentricCoordinateTime\n\nA type representing the Barycentric Coordinate Time (TCB) time scale.\n\n\n\n\n\n","category":"type"},{"location":"#Tempo.BarycentricDynamicalTime","page":"Home","title":"Tempo.BarycentricDynamicalTime","text":"BarycentricDynamicalTime\n\nA type representing the Barycentric Dynamical Time (TDB) time scale.\n\n\n\n\n\n","category":"type"},{"location":"#Tempo.CoordinatedUniversalTime","page":"Home","title":"Tempo.CoordinatedUniversalTime","text":"CoordinatedUniversalTime\n\nA type representing the Coordinated Universal Time (UTC) time scale.\n\n\n\n\n\n","category":"type"},{"location":"#Tempo.Date","page":"Home","title":"Tempo.Date","text":"Date\n\nType to represent a calendar date.\n\nFields\n\nyear – year\nmonth – month \nday – day\n\nConstructors\n\nDate(year::N, month::N, day::N) – is the default constructor.\nDate(offset::N) where {N<:Integer} – initialize from integer day    offset from 2000-01-01.\nDate(d::Date, offset::N) where {N<:Integer} – day offset from d.\nDate(year::N, dayinyear::N) where {N<:Integer} – initialize giving the    year and the day of the year.\nDate(dt::DateTime) – extract date from DateTime objects.\n\n\n\n\n\n","category":"type"},{"location":"#Tempo.DateTime","page":"Home","title":"Tempo.DateTime","text":"DateTime{N<:Integer, T<:AbstractFloat} <: AbstractDateTimeEpoch\n\nA type wrapping a date and a time since a reference date.\n\nFields\n\ndate – Date part of the type\ntime – Time part of the type\n\nConstructors\n\nDateTime{T}(date::Date{N}, time::Time{N, T}) – default constructor.\nDateTime(year::N, month::N, day::N, hour::N, min::N,    sec::N, frac::T=0.0) where {N<:Integer, T<:AbstractFloat} – full constructor\nDateTime(s::AbstractString) – parse DateTime from ISO string using    parse_iso.\nDateTime(seconds::T) where {T<:AbstractFloat} – parse from seconds since J2000.\nDateTime(d::Date, sec::T) where {T<:AbstractFloat} – parse as seconds since d.\nDateTime{N, T}(dt::DateTime) where {N, T} – ghost constructor\nDateTime(e::Epoch) – construct from Epoch\n\n\n\n\n\n","category":"type"},{"location":"#Tempo.Epoch","page":"Home","title":"Tempo.Epoch","text":"Epoch\n\nA type to represent Epoch-like data.  Epochs here are represented as seconds + fraction since a refence epoch, which  is considered to be 2000-01-01T12:00:00, i.e. J2000.\n\nFields\n\nscale – TimeScale to represent the date \nseconds – seconds since origin\n\nConstructors\n\nEpoch{S}(seconds::T) where {S<:AbstractTimeScale, T<:AbstractFloat} – default\nEpoch(seconds::T, ::S) where {S<:AbstractTimeScale, T<:AbstractFloat} \nEpoch(dt::DateTime, ::S) where {S<:AbstractTimeScale} – construct from DateTime\n\n\n\n\n\n","category":"type"},{"location":"#Tempo.Epoch-Tuple{AbstractString}","page":"Home","title":"Tempo.Epoch","text":"Epoch(s::AbstractString)\n\nConstruct an Epoch from a str.\n\nnote: Note\nThis constructor requires that the str is in the format:ISO – yyyy-mm-ddTHH:MM:SS.ffff : assume J2000 as origin\nJ2000 – DDDD.ffff : parse Julian Dates since J2000 (days)\nJD – JD DDDDDDDDD.ffffff : parse Julian Date (days)\nMJD – MJD DDDDDDDDD.ffffff : parse Julian Dates since (days)In all cases the TimeScale should be added at the end of the string,  separated by a whitespace. If it is not declated, TDB will be  used as timescale. \n\nExamples\n\njulia> # standard ISO string \njulia> Epoch(\"2050-01-01T12:35:15.0000 TT\")\n2050-01-01T12:35:14.9999 TT\n\njulia> # standard ISO string (without scale)\njulia> Epoch(\"2050-01-01T12:35:15.0000\")\n2050-01-01T12:35:14.9999 TDB\n\njulia> # Parse Julian Dates \njulia> Epoch(\"JD 2400000.5\")\n1858-11-17T00:00:00.0000 TDB\n\njulia> # Parse Modified Julian Dates\njulia> Epoch(\"MJD 51544.5\")\n2000-01-01T12:00:00.0000 TDB\n\njulia> # Parse Julian Dates since J2000 \njulia> Epoch(\"12.0\")\n2000-01-13T12:00:00.0000 TDB\n\njulia> # All Julian Date parsers allow timescales \njulia> Epoch(\"12.0 TT\")\n2000-01-13T12:00:00.0000 TT\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.Epoch-Union{Tuple{S}, Tuple{AbstractString, S}} where S<:Tempo.AbstractTimeScale","page":"Home","title":"Tempo.Epoch","text":"Epoch(s::AbstractString, scale::S) where {S<:AbstractTimeScale}\n\nConstruct an Epoch from a str in the AbstractTimeScale (scale). \n\nnote: Note\nThis constructor requires that the str is in the format yyyy-mm-ddTHH:MM:SS.sss.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.EpochConversionError","page":"Home","title":"Tempo.EpochConversionError","text":"true\n\nA type representing ephemeris conversion errors.\n\n\n\n\n\n","category":"type"},{"location":"#Tempo.GeocentricCoordinateTime","page":"Home","title":"Tempo.GeocentricCoordinateTime","text":"GeocentricCoordinateTime\n\nA type representing the Geocentric Coordinate Time (TCG) time scale.\n\n\n\n\n\n","category":"type"},{"location":"#Tempo.GlobalPositioningSystemTime","page":"Home","title":"Tempo.GlobalPositioningSystemTime","text":"GlobalPositioningSystemTime\n\nA type representing the Global Positioning System Time (GPS) time scale.\n\n\n\n\n\n","category":"type"},{"location":"#Tempo.HighPrecisionBarycentricDynamicalTime","page":"Home","title":"Tempo.HighPrecisionBarycentricDynamicalTime","text":"HighPrecisionBarycentricDynamicalTime\n\nA type representing the High Precision Barycentric Dynamical Time (TDBH) time scale.\n\n\n\n\n\n","category":"type"},{"location":"#Tempo.InternationalAtomicTime","page":"Home","title":"Tempo.InternationalAtomicTime","text":"InternationalAtomicTime\n\nA type representing the International Atomic Time (TAI) time scale.\n\n\n\n\n\n","category":"type"},{"location":"#Tempo.JulianDate","page":"Home","title":"Tempo.JulianDate","text":"JulianDate\n\nA type representing the JulianDate (JD) epoch origin. \n\nWith this origin, Epoch reference is -4712-01-01T12:00.\n\n\n\n\n\n","category":"type"},{"location":"#Tempo.JulianDate2000","page":"Home","title":"Tempo.JulianDate2000","text":"JulianDate2000\n\nA type representing the JulianDate2000 (J2000) epoch origin. \n\nWith this origin, Epoch reference is 2000-01-01T12:00.\n\n\n\n\n\n","category":"type"},{"location":"#Tempo.Leapseconds","page":"Home","title":"Tempo.Leapseconds","text":"Leapseconds{T}\n\nStores information about leap seconds that have been added to Coordinated Universal Time (UTC)  since the start of the year 2000.\n\nFields\n\nlastupdate: a DatesDateTime object representing the date and time when the Leapseconds struct was last updated.\njd2000: a Vector of type T that stores the Julian Date (JD) of each leap second.\nleap: a Vector of type T that stores the number of leap seconds that have been added at each corresponding JD in the jd2000 field.\n\nExample\n\njd2000 = [2000.5, 2000.75]\nleap = [1, 2]\nls = Leapseconds{Float64}(now(), jd2000, leap)\n\nThis code creates a new Leapseconds object ls, with the current date and time as the  lastupdate, and the jd2000 and leap fields set to the given values. This means that  1 leap second was added at JD 2000.5 and 2 leap seconds were added at JD 2000.75.\n\n\n\n\n\n","category":"type"},{"location":"#Tempo.ModifiedJulianDate","page":"Home","title":"Tempo.ModifiedJulianDate","text":"ModifiedJulianDate\n\nA type representing the ModifiedJulianDate (MJD) epoch origin. \n\nWith this origin, Epoch reference is 1858-11-17T00:00.\n\n\n\n\n\n","category":"type"},{"location":"#Tempo.ModifiedJulianDate2000","page":"Home","title":"Tempo.ModifiedJulianDate2000","text":"ModifiedJulianDate2000\n\nA type representing the ModifiedJulianDate2000 (MJ2000) epoch origin. \n\nWith this origin, Epoch reference is 2000-01-01T00:00.\n\n\n\n\n\n","category":"type"},{"location":"#Tempo.TerrestrialTime","page":"Home","title":"Tempo.TerrestrialTime","text":"TerrestrialTime\n\nA type representing the Terrestrial Time (TT) time scale.\n\n\n\n\n\n","category":"type"},{"location":"#Tempo.Time","page":"Home","title":"Tempo.Time","text":"Time{T<:AbstractFloat}\n\nA type representing a time of the day.\n\nFields\n\nhour – hour \nminute – minute \nsecond – second \nfraction – fraction of seconds\n\nConstructors\n\nTime{T}(hour::N, minute::N, second::N,    fraction::T) where {N<:Integer, T<:AbstractFloat} – default constructor. \nTime(hour::N, minute::N, second::T) where {N<:Integer, T<:AbstractFloat} –    initialize a Time type automatically computing seconds fractions \nTime(secondinday::Integer, fraction::T) where {T<:AbstractFloat} – type from    second in the day and fraction of seconds. \nTime(dt::DateTime) – extract time from DateTime objects.\n\n\n\n\n\n","category":"type"},{"location":"#Tempo.UniversalTime","page":"Home","title":"Tempo.UniversalTime","text":"UniversalTime\n\nA type representing the Universal Time (UT1) time scale.\n\n\n\n\n\n","category":"type"},{"location":"#Types-2","page":"Home","title":"Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [Tempo]\nOrder = [:function]","category":"page"},{"location":"#Graphs.SimpleGraphs.add_vertex!-Union{Tuple{T}, Tuple{TimeSystem{T}, Tempo.TimeScaleNode{T}}} where T","page":"Home","title":"Graphs.SimpleGraphs.add_vertex!","text":"add_vertex!(s::TimeSystem, ts::TimeScaleNode)\n\nRegister a new node in the TimeSystem.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.cal2jd-Tuple{Date}","page":"Home","title":"Tempo.cal2jd","text":"cal2jd(d::Date)\n\nConvert Gregorian calendar date to Julian Date.\n\nOutputs\n\nj2000 – J2000 zero point: always 2451545\nd – J2000 Date for 12 hrs\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.cal2jd-Tuple{Number, Number, Number}","page":"Home","title":"Tempo.cal2jd","text":"cal2jd(Y::N, M::N, D::N) where {N<:Number}\n\nThis function converts a given date in the Gregorian calendar (year, month, day) to the  Julian Date (JD).\n\nThe input arguments are the Year, Month, and Day in the Gregorian calendar.  The year must be greater than 1583, and the month must be between 1 and 12. If the input  year or month is invalid, an EpochConversionError is thrown. The day must also be valid,  taking into account whether the year is a leap year. If the input day is invalid,  an EpochConversionError is thrown.\n\nThe function first converts the year and month to the number of days since January 1,  2000 at noon (J2000). It then adds the day of the month to obtain the number of days since J2000.\n\nInputs\n\nY, M, D – year, month and day in Gregorian calendar\n\nOutputs\n\nj2000 – J2000 zero point: always 2451544.5 (2000-01-01 00:00:00.0).\nd – Date from J2000 in days\n\nExamples\n\nj2000, d = cal2jd(2021, 1, 1)\n# j2000 = 2451544.5\n# d = 730123.0\n\nj2000, d = cal2jd(2022, 2, 28)\n# j2000 = 2451544.5\n# d = 730214.0\n\nj2000, d = cal2jd(2020, 2, 29)\n# EpochConversionError: invalid day provided, shall be between 1 and 29\n\nReferences\n\nExplanatory Supplement to the Astronomical Almanac, P. Kenneth Seidelmann (ed), University Science Books (1992), Section 12.92 (p604).\nKlein, A., A Generalized Kahan-Babuska-Summation-Algorithm. Computing, 76, 279-293 (2006), Section 3.\nERFA software library\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.calhms2jd-NTuple{6, Number}","page":"Home","title":"Tempo.calhms2jd","text":"calhms2jd(Y::Number, M::Number, D::Number, h::Number, m::Number, sec::Number)\n\nConvert Gregorian Calendar date and time to Julian Date.\n\nInputs\n\nY, M, D – year, month and day in Gregorian calendar\nh, m, sec – hour, minute and second\n\nOutputs\n\njd1 – J2000 zero point: always 2451545.0\njd2 – J2000 Date for 12 hrs\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.day-Tuple{DateTime}","page":"Home","title":"Tempo.day","text":"day(d::DateTime)\n\nGet day associated to DateTime type.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.day-Tuple{Date}","page":"Home","title":"Tempo.day","text":"day(d::Date)\n\nGet day associated to Date type.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.fd2hms-Tuple{Number}","page":"Home","title":"Tempo.fd2hms","text":"fd2hms(fd::Number)\n\nConvert day fraction to hour, minute, second.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.fd2hmsf-Tuple{Number}","page":"Home","title":"Tempo.fd2hmsf","text":"fd2hmsf(fd::Number)\n\nConvert day fraction to hour, minute, second, fraction of seconds.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.find_day-Union{Tuple{N}, Tuple{N, N, Bool}} where N<:Integer","page":"Home","title":"Tempo.find_day","text":"find_day(dayinyear::N, month::N, isleap::Bool) where {N<:Integer}\n\nFind day from the day in the year, the month and using if the year is leap or not.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.find_dayinyear-Tuple{Date}","page":"Home","title":"Tempo.find_dayinyear","text":"find_dayinyear(d::Date)\n\nFind day in the year.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.find_month-Union{Tuple{N}, Tuple{N, Bool}} where N<:Integer","page":"Home","title":"Tempo.find_month","text":"find_month(dayinyear::N, isleap::Bool) where {N<:Integer}\n\nFind month from the day in the year and using if the year is leap or not.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.find_year-Tuple{N} where N<:Integer","page":"Home","title":"Tempo.find_year","text":"find_year(d::N) where {N<:Integer}\n\nFind year from j2000 day\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.fraction_of_day-Tuple{Time}","page":"Home","title":"Tempo.fraction_of_day","text":"fraction_of_day(t::Time)::AbstractFloat\nhms2fd(t::Time)\n\nFind fraction of day.\n\nExample\n\njulia> t = Time(12, 30, 40.3424)\n12:30:40.3423\njulia> Tempo.fraction_of_day(t)\n0.5213002592592593  # days\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.fraction_of_second-Tuple{Time}","page":"Home","title":"Tempo.fraction_of_second","text":"fraction_of_second(t::Time)::AbstractFloat\n\nFind fraction of seconds.\n\nExample\n\njulia> t = Time(12, 30, 40.3424)\n12:30:40.3423\njulia> Tempo.fraction_of_second(t)\n0.3423999999999978  # seconds\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.get_leapseconds-Tuple{}","page":"Home","title":"Tempo.get_leapseconds","text":"get_leapseconds(; \n    url::String=\"https://naif.jpl.nasa.gov/pub/naif/generic_kernels/lsk/latest_leapseconds.tls\",\n    force_download::Bool=false)\n\nDownload and parse leapseconds data and return a Leapseconds type. \n\nThe files are downloaded using the RemoteFile package with monthly updates. Hence, if one  desires to force a download before the scheduled time, then set the keyword force_download   to true. Updates scheduled every month.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.hms2fd-Tuple{Number, Number, Number}","page":"Home","title":"Tempo.hms2fd","text":"hms2fd(h::Number, m::Number, s::Number)\n\nConvert hours, minutes, seconds to day fraction. The day fraction is returned  converted in type T.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.hour-Tuple{DateTime}","page":"Home","title":"Tempo.hour","text":"hour(d::DateTime)\n\nGet hour associated to DateTime type.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.hour-Tuple{Time}","page":"Home","title":"Tempo.hour","text":"hour(t::Time)::Integer\n\nGet the current hour.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.isleapyear-Tuple{Date}","page":"Home","title":"Tempo.isleapyear","text":"isleapyear(d::Date)::Bool\n\nFind if Date has a leap year.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.isleapyear-Tuple{Integer}","page":"Home","title":"Tempo.isleapyear","text":"isleapyear(year::Integer)\n\nCheck if a Gregorian year is leap. Return a Bool.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.j2000-Tuple{Any}","page":"Home","title":"Tempo.j2000","text":"j2000(jd)\nj2000(jd1, jd2)\n\nConvert Julian Date in days since J2000\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.j2000-Tuple{DateTime}","page":"Home","title":"Tempo.j2000","text":"j2000(dt::DateTime)\n\nConvert DateTime in Julian days since J2000\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.j2000-Tuple{Date}","page":"Home","title":"Tempo.j2000","text":"j2000(d::Date)\n\nConvert Gregorian calendar date Julian Date past J2000\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.j2000-Tuple{Epoch}","page":"Home","title":"Tempo.j2000","text":"j2000(e::Epoch)\n\nConvert Epoch in Julian Date since J2000 (days)\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.j2000c-Tuple{Any}","page":"Home","title":"Tempo.j2000c","text":"j2000c(jd)\nj2000c(jd1, jd2)\n\nConvert Julian Date (in days) to Julian Centuries\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.j2000c-Tuple{DateTime}","page":"Home","title":"Tempo.j2000c","text":"j2000c(dt::DateTime)\n\nConvert DateTime in Julian Date since J2000 (centuries)\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.j2000c-Tuple{Epoch}","page":"Home","title":"Tempo.j2000c","text":"j2000c(e::Epoch)\n\nConvert Epoch in Julian Date since J2000 (centuries)\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.j2000s-Tuple{Any}","page":"Home","title":"Tempo.j2000s","text":"j2000s(jd)\nj2000s(jd1, jd2)\n\nConvert Julian Date (in days) in seconds past J2000 \n\n\n\n\n\n","category":"method"},{"location":"#Tempo.j2000s-Tuple{DateTime}","page":"Home","title":"Tempo.j2000s","text":"j2000s(dt::DateTime)\n\nConvert DateTime to seconds since J2000\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.j2000s-Tuple{Epoch}","page":"Home","title":"Tempo.j2000s","text":"j2000s(e::Epoch)\n\nConvert Epoch in Julian Date since J2000 (seconds)\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.jd2cal-Tuple{Number, Number}","page":"Home","title":"Tempo.jd2cal","text":"jd2cal(dj1::Number, dj2::Number)\n\nThis function converts a given Julian Date (JD) to a Gregorian calendar date  (year, month, day, and fraction of a day).\n\nThe JD is composed of two input arguments, dj1 and dj2, which can be apportioned in any  convenient way. For example, JD 2450123.7 could be expressed as dj1=2450123.7 and dj2=0.0,  or as dj1=2451545.0 and dj2=-1421.3, or in any of the other ways listed in the documentation.\n\nThe earliest valid date that can be converted is -4713 Jan 1, and the largest value accepted  is 1e9. If the input JD is outside this range, an EpochConversionError is thrown.\n\nInputs\n\ndj1,dj2 – Julian Date (Notes 1, 2)\n\nOutputs\n\nY::Integer – year\nM::Integer – month \nD::Integer – day \nfd::AbstractFloat – fraction of day \n\nNotes\n\nThe earliest valid date is 0 (-4713 Jan 1). The largest value accepted is 1e9.\nThe Julian Date is apportioned in any convenient way between the arguments  dj1 and dj2. For example, JD=2450123.7 could be expressed in any of these  ways, among others:\ndj1 dj2 \n2450123.7 0.0 (JD method)\n2451545.0 -1421.3 (J2000 method)\n2400000.5 50123.2 (MJD method)\n2450123.5 0.2 (date & time method)\n\nReferences\n\nExplanatory Supplement to the Astronomical Almanac, P. Kenneth Seidelmann (ed), University Science Books (1992), Section 12.92 (p604).\nKlein, A., A Generalized Kahan-Babuska-Summation-Algorithm. Computing, 76, 279-293 (2006), Section 3.\nERFA software library\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.jd2calhms-Tuple{Number, Number}","page":"Home","title":"Tempo.jd2calhms","text":"jd2calhms(dj1::Number, dj2::Number)\n\nJulian Date to Gregorian year, month, day, hour, minute, seconds.\n\nInputs\n\ndj1,dj2 – Two part Julian Date\n\nOutputs\n\nA Tuple containing:\n\nY – year\nM – month \nD – day \nh – hour\nm – minute \ns – second\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.leapseconds-Tuple{Number}","page":"Home","title":"Tempo.leapseconds","text":"leapseconds(jd2000::Number)\n\nFor a given UTC date, calculate Delta(AT) = TAI-UTC.\n\n!!!! warning      A new version of the tables called in this function must be produced whenever a new leap      second is announced. This is automatically done using RemoteFiles.\n\nInputs\n\njd2000 – UTC Julian days since J2000. \n\nOutput\n\nΔt – TAI - UTC in seconds\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.microsecond-Tuple{Time}","page":"Home","title":"Tempo.microsecond","text":"microsecond(t::Time)::Integer\n\nGet the current microsecond.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.millisecond-Tuple{Time}","page":"Home","title":"Tempo.millisecond","text":"millisecond(t::Time)::Integer\n\nGet the current millisecond.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.minute-Tuple{DateTime}","page":"Home","title":"Tempo.minute","text":"minute(d::DateTime)\n\nGet minute associated to DateTime type.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.minute-Tuple{Time}","page":"Home","title":"Tempo.minute","text":"minute(t::Time)::Integer\n\nGet the current minute.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.month-Tuple{DateTime}","page":"Home","title":"Tempo.month","text":"month(d::DateTime)\n\nGet month associated to DateTime type.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.month-Tuple{Date}","page":"Home","title":"Tempo.month","text":"month(d::Date)\n\nGet month associated to Date type.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.nanosecond-Tuple{Time}","page":"Home","title":"Tempo.nanosecond","text":"nanosecond(t::Time)::Integer\n\nGet the current nanosecond.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.offset-Tuple{JulianDate2000}","page":"Home","title":"Tempo.offset","text":"offset(::JulianDate2000)\n\nOffset in days to shift J2000 epochs (with origin at 2000-01-01T12:00)  to JulianDate2000 (with origin at 2000-01-01T12:00)\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.offset-Tuple{JulianDate}","page":"Home","title":"Tempo.offset","text":"offset(::JulianDate)\n\nOffset in days to shift J2000 epochs (with origin at 2000-01-01T12:00)  to JulianDate (with origin at -4712-01-01T12:00)\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.offset-Tuple{ModifiedJulianDate2000}","page":"Home","title":"Tempo.offset","text":"offset(::ModifiedJulianDate2000)\n\nOffset in days to shift J2000 epochs (with origin at 2000-01-01T12:00)  to ModifiedJulianDate2000 (with origin at 2000-01-01T00:00)\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.offset-Tuple{ModifiedJulianDate}","page":"Home","title":"Tempo.offset","text":"offset(::ModifiedJulianDate)\n\nOffset in days to shift J2000 epochs (with origin at 2000-01-01T12:00)  to ModifiedJulianDate (with origin at 1858-11-17T00:00)\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.offset_gps2tai-Tuple{Any}","page":"Home","title":"Tempo.offset_gps2tai","text":"offset_gps2tai(seconds)\n\nReturn the fixed offset between GPS and TAI in seconds.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.offset_tai2gps-Tuple{Any}","page":"Home","title":"Tempo.offset_tai2gps","text":"offset_tai2gps(seconds)\n\nReturn the fixed offset between TAI and GPS in seconds.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.offset_tai2tt-Tuple{Any}","page":"Home","title":"Tempo.offset_tai2tt","text":"offset_tai2tt(seconds)\n\nReturn the fixed offset between TAI and TT in seconds.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.offset_tai2utc-Tuple{Any}","page":"Home","title":"Tempo.offset_tai2utc","text":"offset_tai2utc(seconds)\n\nReturn the offset between TAI and UTC in seconds.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.offset_tcb2tdb-Tuple{Any}","page":"Home","title":"Tempo.offset_tcb2tdb","text":"offset_tcb2tdb(seconds)\n\nReturn the linear offset between TCB and TDB in seconds.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.offset_tcg2tt-Tuple{Any}","page":"Home","title":"Tempo.offset_tcg2tt","text":"offset_tcg2tt(seconds)\n\nReturn the linear offset between TCG and TT in seconds.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.offset_tdb2tcb-Tuple{Any}","page":"Home","title":"Tempo.offset_tdb2tcb","text":"offset_tdb2tcb(seconds)\n\nReturn the linear offset between TDB and TCB in seconds.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.offset_tdb2tt-Tuple{Any}","page":"Home","title":"Tempo.offset_tdb2tt","text":"offset_tdb2tt(seconds)\n\nReturn the offset between TDB and TT in seconds. This routine is accurate to ~40 microseconds over the interval 1900-2100.\n\nnote: Note\nAn accurate transformation between TDB and TT depends on the trajectory of the observer.  For two observers fixed on Earth's surface the quantity TDB-TT can differ by as much  as ~4 microseconds.\n\nReferences\n\nhttps://www.cv.nrao.edu/~rfisher/Ephemerides/times.html#TDB\nIssue #26\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.offset_tt2tai-Tuple{Any}","page":"Home","title":"Tempo.offset_tt2tai","text":"offset_tt2tai(seconds)\n\nReturn the fixed offset between TT and TAI in seconds.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.offset_tt2tcg-Tuple{Any}","page":"Home","title":"Tempo.offset_tt2tcg","text":"offset_tt2tcg(seconds)\n\nReturn the linear offset between TT and TCG in seconds.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.offset_tt2tdb-Tuple{Any}","page":"Home","title":"Tempo.offset_tt2tdb","text":"offset_tt2tdb(seconds)\n\nReturn the offset between TT and TDB in seconds. This routine is accurate to ~40 microseconds over the interval 1900-2100.\n\nnote: Note\nAn accurate transformation between TDB and TT depends on the trajectory of the observer.  For two observers fixed on Earth's surface the quantity TDB-TT can differ by as much  as ~4 microseconds.\n\nReferences\n\nhttps://www.cv.nrao.edu/~rfisher/Ephemerides/times.html#TDB\nIssue #26\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.offset_tt2tdbh-Tuple{Any}","page":"Home","title":"Tempo.offset_tt2tdbh","text":"offset_tt2tdbh(seconds)\n\nReturn the offset between TT and TDBH in seconds.\n\nThe maximum error in using the above formula is about 10 µs from 1600 to 2200. For even more precise applications, the series expansion by  Harada & Fukushima (2003) is recommended.\n\nReferences\n\nThe IAU Resolutions on Astronomical Reference Systems, Time Scales, and Earth Rotation Models,   United States Naval Observatory, https://arxiv.org/pdf/astro-ph/0602086.pdf\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.offset_utc2tai-Tuple{Any}","page":"Home","title":"Tempo.offset_utc2tai","text":"offset_utc2tai(seconds)\n\nReturn the offset between UTC and TAI in seconds.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.parse_iso-Tuple{S} where S<:AbstractString","page":"Home","title":"Tempo.parse_iso","text":"parse_iso(s::S) where {S<: AbstractString}\n\nParse ISO datetime string.\n\nInput\n\ns – ISO datetime String in the format YYYY-MM-DDThh:mm:ss.ffffffff\n\nOutput\n\nA Tuple containing year, month, day, hour, minute, second and  millisecond is parsed if the string is ISO otherwise an error is throw.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.second-Tuple{DateTime}","page":"Home","title":"Tempo.second","text":"second(d::DateTime)\n\nGet second associated to DateTime type.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.second-Tuple{Type{<:AbstractFloat}, Time}","page":"Home","title":"Tempo.second","text":"second(::Type{<:AbstractFloat}, t::Time)::AbstractFloat\nsecond(::Type{<:Integer}, t::Time)::Integer \nsecond(t::Time)::Int64\n\nGet the current second.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.second_in_day-Tuple{Time}","page":"Home","title":"Tempo.second_in_day","text":"second_in_day(t::Time)::AbstractFloat\n\nFind second in the day.\n\nExample\n\njulia> t = Time(12, 30, 40.3424)\n12:30:40.3423\njulia> Tempo.second_in_day(t)\n45040.3424  # seconds\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.tai2utc-Tuple{Any, Any}","page":"Home","title":"Tempo.tai2utc","text":"tai2utc(tai1, tai2)\n\nTime scale transformation:  International Atomic Time, TAI to  Coordinated Universal Time, UTC. .\n\nInput\n\ntai1, tai2 – TAI as a 2-part Julian Date\n\nOutput\n\nutc1, utc2 –  UTC as a 2-part (quasi) Julian Date\n\nNotes\n\ntai1+tai2 is Julian Date, apportioned in any convenient way  between the two arguments, for example where tai1 is the Julian  Day Number and tai2 is the fraction of a day.  The returned utc1   and utc2 form an analogous pair.\nJD cannot unambiguously represent UTC during a leap second unless  special measures are taken.  The convention in the present  function is that the JD day represents UTC days whether the  length is 86399, 86400 or 86401 SI seconds.  \n\nReferences\n\nExplanatory Supplement to the Astronomical Almanac,   P. Kenneth Seidelmann (ed), University Science Books (1992),   Section 12.92 (p604).\nMcCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),   IERS Technical Note No. 32, BKG (2004)\nERFA software library\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.timescale-Tuple{Epoch}","page":"Home","title":"Tempo.timescale","text":"timescale(ep::Epoch)\n\nEpoch timescale.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.utc2tai-Tuple{Any, Any}","page":"Home","title":"Tempo.utc2tai","text":"utc2tai(utc1, utc2)\n\nTime scale transformation:  Coordinated Universal Time, UTC, to  International Atomic Time, TAI.\n\nInput\n\nutc1, utc2 –  UTC as a 2-part (quasi) Julian Date\n\nOutput\n\ntai1, tai2 – TAI as a 2-part Julian Date\n\nNotes\n\nutc1+utc2 is quasi Julian Date (see Note 2), apportioned in any  convenient way between the two arguments, for example where utc1  is the Julian Day Number and utc2 is the fraction of a day.\nJD cannot unambiguously represent UTC during a leap second unless  special measures are taken.  The convention in the present  function is that the JD day represents UTC days whether the  length is 86399, 86400 or 86401 SI seconds.  \n\nReferences\n\nExplanatory Supplement to the Astronomical Almanac,   P. Kenneth Seidelmann (ed), University Science Books (1992),   Section 12.92 (p604).\nMcCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),   IERS Technical Note No. 32, BKG (2004)\nERFA software library\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.value-Tuple{Epoch}","page":"Home","title":"Tempo.value","text":"value(ep::Epoch)\n\nFull Epoch value.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.year-Tuple{DateTime}","page":"Home","title":"Tempo.year","text":"year(d::DateTime)\n\nGet year associated to DateTime type.\n\n\n\n\n\n","category":"method"},{"location":"#Tempo.year-Tuple{Date}","page":"Home","title":"Tempo.year","text":"year(d::Date)\n\nGet year associated to Date type.\n\n\n\n\n\n","category":"method"},{"location":"#Macros","page":"Home","title":"Macros","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [Tempo]\nOrder = [:macro]","category":"page"},{"location":"#Tempo.@timescale-Tuple{Symbol, Int64, Symbol}","page":"Home","title":"Tempo.@timescale","text":"@timescale(name, id, type)\n\nCreate an AbstractTimeScale instance to alias the given id.\n\nInputs\n\nname – Acronym to denote the new time scale \nid – Integer whose alias is the new time scale \ntype – Name of the type representing the new time scale \n\n\n\n\n\n","category":"macro"}]
}
