var documenterSearchIndex = {"docs":
[{"location":"api/#tempo_api","page":"Public API","title":"Public Documentation","text":"","category":"section"},{"location":"api/#Datetime","page":"Public API","title":"Datetime","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"Date \nTime \nDateTime \nyear \nmonth \nday \nhour \nminute\nsecond\nfind_dayinyear","category":"page"},{"location":"api/#Tempo.Date","page":"Public API","title":"Tempo.Date","text":"Date\n\nA type to represent a calendar date by storing the year, month and day.\n\n\n\nDate(year::Int, month::Int, day::Int)\n\nConstruct a Date object given the year, month and day.\n\n\n\nDate(offset::Integer)\n\nCreate a Date object given an integer number of days since 2000-01-01.\n\n\n\nDate(year::Integer, dayinyear::Integer)\n\nCreate a Date object given the year and the day of the year dayinyear.\n\nExamples\n\njulia> Date(2020, 1)\n2020-01-01\n\njulia> Date(2020, 300)\n2020-10-26\n\n\n\nDate(dt::DateTime)\n\nExtract the Date object from a DateTime structure. \n\nSee also\n\nSee also Time and DateTime.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.Time","page":"Public API","title":"Tempo.Time","text":"Time{T}\n\nA type representing the time of the day storing the hour, minute, seconds and fraction  of seconds.\n\n\n\nTime(hour::Int, minute::Int, second::Int, fraction::T) where {T <: Number}\n\nCreate a Time object of type T.\n\n\n\nTime(hour::Int, minute::Int, second::Number)\n\nConstruct a Time object given the hour, minute and seconds. In this case, the  seconds can either be an integer or a floating point number. The fraction of seconds will be computed under the hood.\n\n\n\nTime(secondinday::Int, fraction::Number)\nTime(secondinday::Number)\n\nCreate a Time object given the seconds of the day secondinday and/or the fraction of  seconds. \n\n\n\nTime(dt::DateTime)\n\nExtract the Time object from a DateTime structure. \n\nSee also\n\nSee also Date and DateTime.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.DateTime","page":"Public API","title":"Tempo.DateTime","text":"DateTime{T}\n\nA type wrapping a Date and a Time object.\n\n\n\nDateTime(date::Date, time::Time{T})\n\nConstruct a DateTime object of type T from its Date and Time components.\n\n\n\nDateTime(year::Int, month::Int, day::Int, hour::Int, min::Int, sec::Int, frac::Number)\n\nCreate a DateTime object by parts. \n\n\n\nDateTime(iso::AbstractString)\n\nCreate a DateTime object from by parsing an ISO datetime string iso, in the format  YYYY-MM-DDThh:mm:ss.ffffffff. The DateTime parts not provided in the string will be  assigned default values.\n\nExamples\n\njulia> DateTime(\"2023-05-18T20:14:55.02\")\n2023-05-18T20:14:55.020\n\njulia> Tempo.DateTime(\"2022-05-12\")\n2022-05-12T00:00:00.00\n\n\n\nDateTime(seconds::Number)\n\nCreate a DateTime object given the number of seconds elapsed since J2000.\n\n\n\nDateTime(d::Date, sec::Number)\n\nCreate a DateTime object given a Date and the number of seconds since midnight.\n\nExamples\n\njulia> d = Date(2023, 5, 18)\n2023-05-18\n\njulia> DateTime(d, 0)\n2023-05-18T12:00:00.000\n\njulia> DateTime(d, 1)\n2023-05-18T12:00:01.000\n\nSee also\n\nSee also Date, Time and Epoch.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.year","page":"Public API","title":"Tempo.year","text":"year(d::Date)\n\nGet year associated to a Date.\n\n\n\n\n\nyear(d::DateTime)\n\nGet year associated to a DateTime type.\n\n\n\n\n\n","category":"function"},{"location":"api/#Tempo.month","page":"Public API","title":"Tempo.month","text":"month(d::Date)\n\nGet month associated to a Date.\n\n\n\n\n\nmonth(d::DateTime)\n\nGet month associated to a DateTime type.\n\n\n\n\n\n","category":"function"},{"location":"api/#Tempo.day","page":"Public API","title":"Tempo.day","text":"day(d::Date)\n\nGet day associated to a Date.\n\n\n\n\n\nday(d::DateTime)\n\nGet day associated to a DateTime type.\n\n\n\n\n\n","category":"function"},{"location":"api/#Tempo.hour","page":"Public API","title":"Tempo.hour","text":"hour(t::Time)\n\nGet the current hour.\n\n\n\n\n\nhour(d::DateTime)\n\nGet hour associated to a DateTime type.\n\n\n\n\n\n","category":"function"},{"location":"api/#Tempo.minute","page":"Public API","title":"Tempo.minute","text":"minute(t::Time)\n\nGet the current minute.\n\n\n\n\n\nminute(d::DateTime)\n\nGet minute associated to a DateTime type.\n\n\n\n\n\n","category":"function"},{"location":"api/#Tempo.second","page":"Public API","title":"Tempo.second","text":"second(::Type{<:AbstractFloat}, t::Time)\nsecond(::Type{<:Integer}, t::Time)\nsecond(t::Time)\n\nGet the current second.\n\n\n\n\n\nsecond(::Type{<:AbstractFloat}, t::Time)\nsecond(d::DateTime)\n\nGet the seconds associated to a DateTime type. If a floating-point type is given  as first argument, the returned value will also account for the fraction of seconds.\n\n\n\n\n\n","category":"function"},{"location":"api/#Tempo.find_dayinyear","page":"Public API","title":"Tempo.find_dayinyear","text":"find_dayinyear(month::Integer, day::Integer, isleap::Bool)\n\nFind the day of the year given the month, the day of the month and whether the year  is leap or not.\n\n\n\n\n\nfind_dayinyear(d::Date)\n\nFind the day in the year.\n\n\n\n\n\n","category":"function"},{"location":"api/#Epochs","page":"Public API","title":"Epochs","text":"","category":"section"},{"location":"api/#Types","page":"Public API","title":"Types","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"Epoch \ntimescale\nvalue","category":"page"},{"location":"api/#Tempo.Epoch","page":"Public API","title":"Tempo.Epoch","text":"Epoch{S, T}\n\nA type to represent Epoch-like data. Epochs are internally represented as seconds + fraction of  seconds since a reference epoch, which is considered to be 2000-01-01T12:00:00,  i.e. J2000.\n\n\n\nEpoch(sec::Number, scale::AbstractTimeScale)\nEpoch(sec::Number, scale::Type{<:AbstractTimeScale})\nEpoch{S}(seconds::Number) where {S <: AbstractTimeScale}\n\nCreate an Epoch object from the number of seconds since J2000 with the  timescale S.\n\n\n\nEpoch(dt::DateTime, scale::AbstractTimeScale)\nEpoch(dt::DateTime, scale::Type{<:AbstractTimeScale})\n\nCreate an Epoch object from a DateTime structure with timescale scale.\n\n\n\nEpoch(str::AbstractString, scale::AbstractTimeScale)\nEpoch(str::AbstractString)\n\nCreate an Epoch object from an ISO-formatted string. The timescale can either be  specified as a second argument or written at the end of the string. \n\nThis constructor requires that the str is in the format:\n\nISO – yyyy-mm-ddTHH:MM:SS.ffff : assume J2000 as origin\nJ2000 – DDDD.ffff : parse Julian Date since J2000, in days\nJD – JD DDDDDDDDD.ffffff : parse Julian Date, in days\nMJD – MJD DDDDDDDDD.ffffff : parse a Modified Julian Date, in days\n\nA TimeScale can be added at the end of the string, separated by a whitespace.  If it is not declared, TDB will be used as a default timescale. \n\nExamples\n\njulia> Epoch(\"2050-01-01T12:35:15.0000 TT\")\n2050-01-01T12:35:14.9999 TT\n\njulia> Epoch(\"2050-01-01T12:35:15.0000\")\n2050-01-01T12:35:14.9999 TDB\n\njulia> Epoch(\"JD 2400000.5\")\n1858-11-17T00:00:00.0000 TDB\n\njulia> Epoch(\"MJD 51544.5\")\n2000-01-01T12:00:00.0000 TDB\n\njulia> Epoch(\"12.0\")\n2000-01-13T12:00:00.0000 TDB\n\njulia> Epoch(\"12.0 TT\")\n2000-01-13T12:00:00.0000 TT\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.timescale","page":"Public API","title":"Tempo.timescale","text":"timescale(ep::Epoch)\n\nEpoch timescale.\n\n\n\n\n\n","category":"function"},{"location":"api/#Tempo.value","page":"Public API","title":"Tempo.value","text":"value(ep::Epoch)\n\nFull Epoch value.\n\n\n\n\n\n","category":"function"},{"location":"api/#Origins","page":"Public API","title":"Origins","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"JD\nJ2000\nMJD\nMJD2000","category":"page"},{"location":"api/#Tempo.JD","page":"Public API","title":"Tempo.JD","text":"JD\n\nThe singleton instance of the JulianDate epoch origin. \n\nWith this origin, Epoch reference is -4712-01-01T12:00.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.J2000","page":"Public API","title":"Tempo.J2000","text":"J2000\n\nThe singleton instance of the JulianDate2000 epoch origin. \n\nWith this origin, Epoch reference is 2000-01-01T12:00.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.MJD","page":"Public API","title":"Tempo.MJD","text":"MJD\n\nThe singleton instance of the ModifiedJulianDate epoch origin. \n\nWith this origin, Epoch reference is 1858-11-17T00:00.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.MJD2000","page":"Public API","title":"Tempo.MJD2000","text":"MJD2000\n\nThe singleton instance of the ModifiedJulianDate2000 epoch origin. \n\nWith this origin, Epoch reference is 2000-01-01T00:00.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Conversions","page":"Public API","title":"Conversions","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"j2000\nj2000s\nj2000c","category":"page"},{"location":"api/#Tempo.j2000","page":"Public API","title":"Tempo.j2000","text":"j2000(jd)\nj2000(jd1, jd2)\n\nConvert Julian Date in days since J2000\n\n\n\n\n\nj2000(d::Date)\n\nConvert Gregorian calendar date Date to a Julian Date since J2000,  in days.\n\n\n\n\n\nj2000(dt::DateTime)\n\nConvert a DateTime dt in Julian days since J2000.\n\n\n\n\n\nj2000(e::Epoch)\n\nConvert Epoch in Julian Date days since J2000.\n\n\n\n\n\n","category":"function"},{"location":"api/#Tempo.j2000s","page":"Public API","title":"Tempo.j2000s","text":"j2000s(jd)\nj2000s(jd1, jd2)\n\nConvert Julian Date (in days) in seconds past J2000 \n\n\n\n\n\nj2000s(dt::DateTime)\n\nConvert a DateTime dt to seconds since J2000.\n\n\n\n\n\nj2000s(e::Epoch)\n\nConvert Epoch in Julian Date seconds since J2000.\n\n\n\n\n\n","category":"function"},{"location":"api/#Tempo.j2000c","page":"Public API","title":"Tempo.j2000c","text":"j2000c(jd)\nj2000c(jd1, jd2)\n\nConvert Julian Date (in days) to Julian Centuries\n\n\n\n\n\nj2000c(dt::DateTime)\n\nConvert  a DateTime dt in a Julian Date since J2000, in centuries.\n\n\n\n\n\nj2000c(e::Epoch)\n\nConvert Epoch in Julian Date centuries since J2000.\n\n\n\n\n\n","category":"function"},{"location":"api/#Timescales","page":"Public API","title":"Timescales","text":"","category":"section"},{"location":"api/#Time-System","page":"Public API","title":"Time System","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"@timescale \ntimescale_alias\ntimescale_name\ntimescale_id\nTimeSystem\nadd_timescale!\nTIMESCALES","category":"page"},{"location":"api/#Tempo.@timescale","page":"Public API","title":"Tempo.@timescale","text":"@timescale(name, id, type)\n\nCreate a new timescale instance to alias the given id. This macro creates an  AbstractTimeScale subtype and its singleton instance called name. Its type  is obtained by appending TimeScale to name if it was not provided.\n\nExamples\n\njulia> @timescale NTS 100 NewTimeScale \n\njulia> typeof(NTS)\nNewTimeScale \n\njulia> timescale_alias(NTS)\n100\n\njulia> @timescale TBH 200\n\njulia> typeof(TBH)\nTBHTimeScale\n\njulia> timescale_alias(TBH)\n200\n\nSee also\n\nSee also timescale_alias and add_timescale!.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Tempo.timescale_alias","page":"Public API","title":"Tempo.timescale_alias","text":"timescale_alias(scale::AbstractTimeScale)\n\nReturn the ID associated to scale.\n\n\n\n\n\n","category":"function"},{"location":"api/#Tempo.timescale_name","page":"Public API","title":"Tempo.timescale_name","text":"timescale_name(scale::AbstractTimeScale)\n\nReturn the name of scale.\n\n\n\n\n\n","category":"function"},{"location":"api/#Tempo.timescale_id","page":"Public API","title":"Tempo.timescale_id","text":"timescale_id(scale::AbstractTimeScale)\n\nReturn the ID of scale.\n\n\n\n\n\n","category":"function"},{"location":"api/#Tempo.TimeSystem","page":"Public API","title":"Tempo.TimeSystem","text":"TimeSystem{T}\n\nA TimeSystem object manages a collection of default and user-defined TimeScaleNode objects, enabling efficient time transformations between them. It leverages a  MappedDiGraph to keep track of the relationships between the timescales.\n\n\n\nTimeSystem{T}()\n\nCreate a empty TimeSystem object with datatype T.\n\nExamples\n\njulia> ts = TimeSystem{Float64}();\n\njulia> @timescale TSA 100 TimeScaleA\n\njulia> @timescale TSB 200 TimeScaleB\n\njulia> add_timescale!(ts, TSA)\n\njulia> offset_tsa2tsb(seconds) = 1.0\n\njulia> offset_tsb2tsa(seconds) = -1.0\n\njulia> add_timescale!(ts, TSB, offset_tsa2tsb; parent=TSA, ftp=offset_tsb2tsa)\n\nSee also\n\nSee also @timescale and add_timescale!.\n\n\n\n\n\n","category":"type"},{"location":"api/#Tempo.add_timescale!","page":"Public API","title":"Tempo.add_timescale!","text":"add_timescale!(s::TimeSystem, ts::TimeScaleNode)\n\nRegister a new node in the TimeSystem.\n\nwarning: Warning\nThis is a low-level function and should not be called by the user.\n\n\n\n\n\nadd_timescale!(system::TimeSystem, scale::AbstractTimeScale, ffp::Function; ftp, parent)\n\nAdd scale as a timescale to system. A custom function ffp providing the time offset,  in seconds, between the parent scale and the current scale must be provided by the user. \n\nThe parent and ffp arguments are unneeded only for the root timescale. If the user  wishes to add a scale to a non-empty timesystem, this argument becomes mandatory.\n\nThe input functions must accept only the seconds in the parent scale as argument and must  return a single numerical output. An optional function ftp, with a similar interface, returning the offset from the current to the parent scale may also be provided. \n\nnote: Note\nIf ftp is not provided, the reverse timescale transformation will not be possible. \n\nExamples\n\njulia> SYSTEM = TimeSystem{Float64}();\n\njulia> @timescale RTS 102 RootTimeScale\n\njulia> @timescale CTS 103 ChildTimeScale\n\njulia> root_to_child(x::Number) = 13.3;\n\njulia> child_to_root(x::Number) = -13.3;\n\njulia> add_timescale!(SYSTEM, RTS)\n\njulia> add_timescale!(SYSTEM, CTS, root_to_child; parent=RTS, ftp=child_to_root)\n\nSee also\n\nSee also @timescale and TimeSystem.\n\n\n\n\n\n","category":"function"},{"location":"api/#Tempo.TIMESCALES","page":"Public API","title":"Tempo.TIMESCALES","text":"TIMESCALES\n\nDefault time scales graph, containing at least: (\"TT\", \"TAI\", \"UTC\", \"TCG\", \"TCB\", \"TDB\", \"UT1\", \"TDBH\", \"GPS\")\n\nIt can be easily extended using the @timescale to create new TimeScaleNode  aliases and add_timescale! method to define its relation with the other nodes  in the graph. \n\nExample\n\n# Define a new timescale type alias\n@timescale NTS 100 NewTimeScale\n\n# Define offset to and from another timescale in the graph \noffset_ffp(seconds) = 1.0\noffset_ftp(seconds) = -1.0\n\n# Connect to the graph, with the parent node (TDB in this example)\nadd_timescale!(TIMESCALES, NTS, offset_ffp, parent=TDB, ftp=offset_ftp)\n\nSee also\n\nSee also @timescale and add_timescale!.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Default-Timescales","page":"Public API","title":"Default Timescales","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"GPS\nTAI\nTCB\nTCG\nTDB \nTDBH\nTT\nUT1\nUTC","category":"page"},{"location":"api/#Tempo.GPS","page":"Public API","title":"Tempo.GPS","text":"GPS\n\nThe singleton instance of the GlobalPositioningSystemTime type representing the Global Positioning System Time (GPS) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.TAI","page":"Public API","title":"Tempo.TAI","text":"TAI\n\nThe singleton instance of the InternationalAtomicTime type representing the International Atomic Time (TAI) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.TCB","page":"Public API","title":"Tempo.TCB","text":"TCB\n\nThe singleton instance of the BarycentricCoordinateTime type representing the Barycentric Coordinate Time (TCB) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.TCG","page":"Public API","title":"Tempo.TCG","text":"TCG\n\nThe singleton instance of the GeocentricCoordinateTime type representing the Geocentric Coordinate Time (TCG) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.TDB","page":"Public API","title":"Tempo.TDB","text":"TDB\n\nThe singleton instance of the BarycentricDynamicalTime type representing the Barycentric Dynamical Time (TDB) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.TDBH","page":"Public API","title":"Tempo.TDBH","text":"TDBH\n\nThe singleton instance of the HighPrecisionBarycentricDynamicalTime type representing the High Precision Barycentric Dynamical Time (TDBH) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.TT","page":"Public API","title":"Tempo.TT","text":"TT\n\nThe singleton instance of the TerrestrialTime type representing the Terrestrial Time (TT) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.UT1","page":"Public API","title":"Tempo.UT1","text":"UT1\n\nThe singleton instance of the UniversalTime type representing the Universal Time (UT1) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.UTC","page":"Public API","title":"Tempo.UTC","text":"UTC\n\nThe singleton instance of the CoordinatedUniversalTime type representing the Coordinated Universal Time (UTC) time scale.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Constants","page":"Public API","title":"Constants","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"DJ2000\nDMJD \nDJM0","category":"page"},{"location":"api/#Tempo.DJ2000","page":"Public API","title":"Tempo.DJ2000","text":"DJ2000\n\nReference epoch J2000, Julian Date (2451545.0).  It is 12:00 01-01-2000.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.DMJD","page":"Public API","title":"Tempo.DMJD","text":"DMJD\n\nReference epoch J2000, Modified Julian Date (51544.5).\n\n\n\n\n\n","category":"constant"},{"location":"api/#Tempo.DJM0","page":"Public API","title":"Tempo.DJM0","text":"DJM0\n\nJulian Date of Modified Julian Date zero point (2400000.5). It is 00:00 17-11-1858.\n\n\n\n\n\n","category":"constant"},{"location":"lapi/#tempo_lapi","page":"Low-level API","title":"Low-level API","text":"","category":"section"},{"location":"lapi/","page":"Low-level API","title":"Low-level API","text":"These functions are not meant to be used outside of the package. They are documented only to aid future developments of the package.","category":"page"},{"location":"lapi/#Epochs","page":"Low-level API","title":"Epochs","text":"","category":"section"},{"location":"lapi/","page":"Low-level API","title":"Low-level API","text":"Tempo.AbstractEpochOrigin \nTempo.JulianDate \nTempo.JulianDate2000\nTempo.ModifiedJulianDate\nTempo.ModifiedJulianDate2000\nTempo.EpochConversionError\nTempo.parse_iso","category":"page"},{"location":"lapi/#Tempo.AbstractEpochOrigin","page":"Low-level API","title":"Tempo.AbstractEpochOrigin","text":"AbstractEpochOrigin\n\nAbstract type for all epoch origins.\n\n\n\n\n\n","category":"type"},{"location":"lapi/#Tempo.JulianDate","page":"Low-level API","title":"Tempo.JulianDate","text":"JulianDate\n\nA type representing the JulianDate (JD) epoch origin. \n\nWith this origin, Epoch reference is -4712-01-01T12:00.\n\n\n\n\n\n","category":"type"},{"location":"lapi/#Tempo.JulianDate2000","page":"Low-level API","title":"Tempo.JulianDate2000","text":"JulianDate2000\n\nA type representing the JulianDate2000 (J2000) epoch origin. \n\nWith this origin, Epoch reference is 2000-01-01T12:00.\n\n\n\n\n\n","category":"type"},{"location":"lapi/#Tempo.ModifiedJulianDate","page":"Low-level API","title":"Tempo.ModifiedJulianDate","text":"ModifiedJulianDate\n\nA type representing the ModifiedJulianDate (MJD) epoch origin. \n\nWith this origin, Epoch reference is 1858-11-17T00:00.\n\n\n\n\n\n","category":"type"},{"location":"lapi/#Tempo.ModifiedJulianDate2000","page":"Low-level API","title":"Tempo.ModifiedJulianDate2000","text":"ModifiedJulianDate2000\n\nA type representing the ModifiedJulianDate2000 (MJD2000) epoch origin. \n\nWith this origin, Epoch reference is 2000-01-01T00:00.\n\n\n\n\n\n","category":"type"},{"location":"lapi/#Tempo.EpochConversionError","page":"Low-level API","title":"Tempo.EpochConversionError","text":"EpochConversionError\n\nA type representing epoch conversion errors.\n\n\n\n\n\n","category":"type"},{"location":"lapi/#Tempo.parse_iso","page":"Low-level API","title":"Tempo.parse_iso","text":"parse_iso(s::AbstractString)\n\nParse an ISO datetime string, in the format YYYY-MM-DDThh:mm:ss.ffffffff and return  a Tuple containing the year, month, day , hour, minute, second and milliseconds. If the  string format is not recognised as ISO, an ArgumentError is thrown.\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Timescale-Offsets","page":"Low-level API","title":"Timescale Offsets","text":"","category":"section"},{"location":"lapi/","page":"Low-level API","title":"Low-level API","text":"Tempo.offset\nTempo.offset_gps2tai\n\nTempo.offset_tai2gps\nTempo.offset_tai2tt\nTempo.offset_tai2utc\n\nTempo.offset_tcb2tdb\nTempo.offset_tcg2tt\n\nTempo.offset_tdb2tt\nTempo.offset_tdb2tcb\n\nTempo.offset_tt2tai\nTempo.offset_tt2tcg\nTempo.offset_tt2tdb\nTempo.offset_tt2tdbh\n\nTempo.offset_utc2tai","category":"page"},{"location":"lapi/#Tempo.offset","page":"Low-level API","title":"Tempo.offset","text":"offset(::Tempo.JulianDate)\n\nOffset in days to shift J2000 epochs (with origin at 2000-01-01T12:00)  to JulianDate (with origin at -4712-01-01T12:00)\n\n\n\n\n\noffset(::Tempo.ModifiedJulianDate)\n\nOffset in days to shift J2000 epochs (with origin at 2000-01-01T12:00)  to ModifiedJulianDate (with origin at 1858-11-17T00:00)\n\n\n\n\n\noffset(::Tempo.JulianDate2000)\n\nOffset in days to shift J2000 epochs (with origin at 2000-01-01T12:00)  to JulianDate2000 (with origin at 2000-01-01T12:00)\n\n\n\n\n\noffset(::Tempo.ModifiedJulianDate2000)\n\nOffset in days to shift J2000 epochs (with origin at 2000-01-01T12:00)  to ModifiedJulianDate2000 (with origin at 2000-01-01T00:00)\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.offset_gps2tai","page":"Low-level API","title":"Tempo.offset_gps2tai","text":"offset_gps2tai(seconds)\n\nReturn the fixed offset between GPS and TAI in seconds.\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.offset_tai2gps","page":"Low-level API","title":"Tempo.offset_tai2gps","text":"offset_tai2gps(seconds)\n\nReturn the fixed offset between TAI and GPS in seconds.\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.offset_tai2tt","page":"Low-level API","title":"Tempo.offset_tai2tt","text":"offset_tai2tt(seconds)\n\nReturn the fixed offset between TAI and TT in seconds.\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.offset_tai2utc","page":"Low-level API","title":"Tempo.offset_tai2utc","text":"offset_tai2utc(seconds)\n\nReturn the offset between TAI and UTC in seconds.\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.offset_tcb2tdb","page":"Low-level API","title":"Tempo.offset_tcb2tdb","text":"offset_tcb2tdb(seconds)\n\nReturn the linear offset between TCB and TDB in seconds.\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.offset_tcg2tt","page":"Low-level API","title":"Tempo.offset_tcg2tt","text":"offset_tcg2tt(seconds)\n\nReturn the linear offset between TCG and TT in seconds.\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.offset_tdb2tt","page":"Low-level API","title":"Tempo.offset_tdb2tt","text":"offset_tdb2tt(seconds)\n\nReturn the offset between TDB and TT in seconds. This routine is accurate to ~40 microseconds over the interval 1900-2100.\n\nnote: Note\nAn accurate transformation between TDB and TT depends on the trajectory of the observer.  For two observers fixed on Earth's surface the quantity TDB-TT can differ by as much  as ~4 microseconds.\n\nReferences\n\nhttps://www.cv.nrao.edu/~rfisher/Ephemerides/times.html#TDB\nIssue #26\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.offset_tdb2tcb","page":"Low-level API","title":"Tempo.offset_tdb2tcb","text":"offset_tdb2tcb(seconds)\n\nReturn the linear offset between TDB and TCB in seconds.\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.offset_tt2tai","page":"Low-level API","title":"Tempo.offset_tt2tai","text":"offset_tt2tai(seconds)\n\nReturn the fixed offset between TT and TAI in seconds.\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.offset_tt2tcg","page":"Low-level API","title":"Tempo.offset_tt2tcg","text":"offset_tt2tcg(seconds)\n\nReturn the linear offset between TT and TCG in seconds.\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.offset_tt2tdb","page":"Low-level API","title":"Tempo.offset_tt2tdb","text":"offset_tt2tdb(seconds)\n\nReturn the offset between TT and TDB in seconds. This routine is accurate to ~40 microseconds over the interval 1900-2100.\n\nnote: Note\nAn accurate transformation between TDB and TT depends on the trajectory of the observer.  For two observers fixed on Earth's surface the quantity TDB-TT can differ by as much  as ~4 microseconds.\n\nReferences\n\nhttps://www.cv.nrao.edu/~rfisher/Ephemerides/times.html#TDB\nIssue #26\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.offset_tt2tdbh","page":"Low-level API","title":"Tempo.offset_tt2tdbh","text":"offset_tt2tdbh(seconds)\n\nReturn the offset between TT and TDBH in seconds.\n\nThe maximum error in using the above formula is about 10 µs from 1600 to 2200. For even more precise applications, the series expansion by  Harada & Fukushima (2003) is recommended.\n\nReferences\n\nThe IAU Resolutions on Astronomical Reference Systems, Time Scales, and Earth Rotation Models,   United States Naval Observatory, https://arxiv.org/pdf/astro-ph/0602086.pdf\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.offset_utc2tai","page":"Low-level API","title":"Tempo.offset_utc2tai","text":"offset_utc2tai(seconds)\n\nReturn the offset between UTC and TAI in seconds.\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Timescale-Types","page":"Low-level API","title":"Timescale Types","text":"","category":"section"},{"location":"lapi/","page":"Low-level API","title":"Low-level API","text":"Tempo.TimeScaleNode\nTempo.AbstractTimeScale\nTempo.GlobalPositioningSystemTime\nTempo.BarycentricDynamicalTime\nTempo.HighPrecisionBarycentricDynamicalTime\nTempo.BarycentricCoordinateTime\nTempo.TerrestrialTime\nTempo.InternationalAtomicTime\nTempo.UniversalTime\nTempo.CoordinatedUniversalTime\nTempo.GeocentricCoordinateTime","category":"page"},{"location":"lapi/#Tempo.TimeScaleNode","page":"Low-level API","title":"Tempo.TimeScaleNode","text":"TimeScaleNode{T} <: AbstractGraphNode\n\nDefine a timescale.\n\nFields\n\nname – timescale name\nid – timescale identification number (ID)\nparentid – ID of the parent timescale\nffp – offest function from the parent timescale\nftp – offset function to the parent timescale\n\n\n\n\n\n","category":"type"},{"location":"lapi/#Tempo.AbstractTimeScale","page":"Low-level API","title":"Tempo.AbstractTimeScale","text":"AbstractTimeScale\n\nAll timescales are subtypes of the abstract type AbstractTimeScale.\n\n\n\n\n\n","category":"type"},{"location":"lapi/#Tempo.GlobalPositioningSystemTime","page":"Low-level API","title":"Tempo.GlobalPositioningSystemTime","text":"GlobalPositioningSystemTime <: AbstractTimeScale\n\nA type representing the Global Positioning System Time (GPS) time scale.\n\n\n\n\n\n","category":"type"},{"location":"lapi/#Tempo.BarycentricDynamicalTime","page":"Low-level API","title":"Tempo.BarycentricDynamicalTime","text":"BarycentricDynamicalTime <: AbstractTimeScale\n\nA type representing the Barycentric Dynamical Time (TDB) time scale.\n\n\n\n\n\n","category":"type"},{"location":"lapi/#Tempo.HighPrecisionBarycentricDynamicalTime","page":"Low-level API","title":"Tempo.HighPrecisionBarycentricDynamicalTime","text":"HighPrecisionBarycentricDynamicalTime <: AbstractTimeScale\n\nA type representing the High Precision Barycentric Dynamical Time (TDBH) time scale.\n\n\n\n\n\n","category":"type"},{"location":"lapi/#Tempo.BarycentricCoordinateTime","page":"Low-level API","title":"Tempo.BarycentricCoordinateTime","text":"BarycentricCoordinateTime <: AbstractTimeScale\n\nA type representing the Barycentric Coordinate Time (TCB) time scale.\n\n\n\n\n\n","category":"type"},{"location":"lapi/#Tempo.TerrestrialTime","page":"Low-level API","title":"Tempo.TerrestrialTime","text":"TerrestrialTime <: AbstractTimeScale\n\nA type representing the Terrestrial Time (TT) time scale.\n\n\n\n\n\n","category":"type"},{"location":"lapi/#Tempo.InternationalAtomicTime","page":"Low-level API","title":"Tempo.InternationalAtomicTime","text":"InternationalAtomicTime <: AbstractTimeScale\n\nA type representing the International Atomic Time (TAI) time scale.\n\n\n\n\n\n","category":"type"},{"location":"lapi/#Tempo.UniversalTime","page":"Low-level API","title":"Tempo.UniversalTime","text":"UniversalTime <: AbstractTimeScale\n\nA type representing the Universal Time (UT1) time scale.\n\n\n\n\n\n","category":"type"},{"location":"lapi/#Tempo.CoordinatedUniversalTime","page":"Low-level API","title":"Tempo.CoordinatedUniversalTime","text":"CoordinatedUniversalTime <: AbstractTimeScale\n\nA type representing the Coordinated Universal Time (UTC) time scale.\n\n\n\n\n\n","category":"type"},{"location":"lapi/#Tempo.GeocentricCoordinateTime","page":"Low-level API","title":"Tempo.GeocentricCoordinateTime","text":"GeocentricCoordinateTime <: AbstractTimeScale\n\nA type representing the Geocentric Coordinate Time (TCG) time scale.\n\n\n\n\n\n","category":"type"},{"location":"lapi/#Conversions","page":"Low-level API","title":"Conversions","text":"","category":"section"},{"location":"lapi/","page":"Low-level API","title":"Low-level API","text":"Base.convert\n\nTempo.cal2jd\nTempo.calhms2jd\nTempo.fd2hms\nTempo.fd2hmsf\nTempo.hms2fd\nTempo.jd2cal\nTempo.jd2calhms\n\nTempo.tai2utc\nTempo.utc2tai","category":"page"},{"location":"lapi/#Base.convert","page":"Low-level API","title":"Base.convert","text":"convert(to::S2, e::Epoch{S1}; system::TimeSystem=TIMESCALES)\n\nConvert Epoch with timescale S1 to S2. Allows to use the default TimeSystem or  a custom constructed one. \n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.cal2jd","page":"Low-level API","title":"Tempo.cal2jd","text":"cal2jd(year::Integer, month::Integer, day::Integer)\n\nThis function converts a given date in the Gregorian calendar (year, month, day) to the  corresponding two-parts Julian Date. The first part is the DJ2000, while the  second output is the number of days since J2000.\n\nThe year must be greater than 1583, and the month must be between 1 and 12. The day must  also be valid, taking into account whether the year is a leap year. If the input year or  month or day are invalid, a DomainError is thrown.\n\nExamples\n\njulia> Tempo.cal2jd(2021, 1, 1)\n(2.4000005e6, 59215.0)\n\njulia> Tempo.cal2jd(2022, 2, 28)\n(2.4000005e6, 59638.0)\n\njulia> Tempo.cal2jd(2019, 2, 29)\nERROR: DomainError with 29:\nthe day shall be between 1 and 28.\n\nReferences\n\nSeidelmann P. K., (1992), Explanatory Supplement to the Astronomical Almanac,   University Science Books, Section 12.92 (p604).\nKlein, A., (2006), A Generalized Kahan-Babuska-Summation-Algorithm.   Computing, 76, 279-293, Section 3.\nERFA software library\n\n\n\n\n\ncal2jd(d::Date)\n\nConvert Gregorian calendar Date to a Julian Date, in days.\n\nOutputs\n\nj2000 – J2000 zero point: always 2451545\nd – J2000 Date for 12 hrs\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.calhms2jd","page":"Low-level API","title":"Tempo.calhms2jd","text":"calhms2jd(year, month, day, hour, minute, seconds)\n\nConvert Gregorian Calendar date and time to a two-parts Julian Date. The first part  is the DJ2000, while the second output is the number of days since J2000.\n\nExamples\n\njulia> Tempo.calhms2jd(2000, 1, 1, 12, 0, 0)\n(2.451545e6, 0.0)\n\njulia> Tempo.calhms2jd(2022, 1, 1, 0, 0, 0)\n(2.451545e6, 8035.5)\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.fd2hms","page":"Low-level API","title":"Tempo.fd2hms","text":"fd2hms(fd::Number)\n\nConvert the day fraction fd to hour, minute and seconds.\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.fd2hmsf","page":"Low-level API","title":"Tempo.fd2hmsf","text":"fd2hmsf(fd::Number)\n\nConvert the day fraction fd to hour, minute, second and fraction of seconds.\n\nExamples\n\njulia> Tempo.fd2hms(0.5)\n(12, 0, 0.0)\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.hms2fd","page":"Low-level API","title":"Tempo.hms2fd","text":"hms2fd(hour::Integer, minute::Integer, second::Number)\n\nConvert hours, minutes and seconds to day fraction.\n\nExamples\n\njulia> Tempo.hms2fd(12, 0, 0.0)\n0.5\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.jd2cal","page":"Low-level API","title":"Tempo.jd2cal","text":"jd2cal(dj1::Number, dj2::Number)\n\nThis function converts a given Julian Date (JD) to a Gregorian calendar date  (year, month, day, and fraction of a day).\n\nExamples\n\njulia> Tempo.jd2cal(DJ2000, 0.0)\n(2000, 1, 1, 0.5)\n\njulia> Tempo.jd2cal(DJ2000, 365.5)\n(2001, 1, 1, 0.0)\n\njulia> Tempo.jd2cal(DJ2000 + 365, 0.5)\n(2001, 1, 1, 0.0)\n\nnote: Note\nThe Julian Date is apportioned in any convenient way between the arguments  dj1 and dj2. For example, JD = 2450123.7 could be expressed in any of these  ways, among others:dj1 dj2 \n2450123.7 0.0 (JD method)\n2451545.0 -1421.3 (J2000 method)\n2400000.5 50123.2 (MJD method)\n2450123.5 0.2 (date & time method)\n\nwarning: Warning\nThe earliest valid date is -68569.5 (-4713 Jan 1). The largest value accepted is 1e9.\n\nReferences\n\nSeidelmann P. K., (1992), Explanatory Supplement to the Astronomical Almanac,   University Science Books, Section 12.92 (p604).\nKlein, A., (2006), A Generalized Kahan-Babuska-Summation-Algorithm.   Computing, 76, 279-293, Section 3.\nERFA software library\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.jd2calhms","page":"Low-level API","title":"Tempo.jd2calhms","text":"jd2calhms(dj1::Number, dj2::Number)\n\nConvert a two-parts Julian Date to Gregorian year, month, day, hour, minute, seconds. See  jd2cal for more information on the Julian Date composition. \n\njulia> Tempo.jd2calhms(DJ2000, 0.0)\n(2000, 1, 1, 12, 0, 0.0)\n\njulia> Tempo.jd2calhms(DJ2000 + 1, 0.25)\n(2000, 1, 2, 18, 0, 0.0)\n\njulia> Tempo.jd2calhms(DJ2000, 1.25)\n(2000, 1, 2, 18, 0, 0.0)\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.tai2utc","page":"Low-level API","title":"Tempo.tai2utc","text":"tai2utc(tai1, tai2)\n\nTransform a 2-part (quasi) Julian Date, in days, in International Atomic Time, TAI  to a 2-part Julian Date in the Coordinated Universal Time, UTC, scale.\n\nnote: Note\ntai1 + tai2 is Julian Date, apportioned in any convenient way between the two arguments, for example such that tai1 is the Julian Day Number and tai2 is the fraction of a day.  The returned utc1  and utc2 form an analogous pair.\n\nnote: Note\nJD cannot unambiguously represent UTC during a leap second unless special measures are taken.  The convention in the present function is that the JD day represents UTC days whether the length is 86399, 86400 or 86401 SI seconds.  \n\nReferences\n\nSeidelmann P. K., (1992), Explanatory Supplement to the Astronomical Almanac,   University Science Books, Section 12.92 (p604).\nMcCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),   IERS Technical Note No. 32, BKG (2004)\nERFA software library\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.utc2tai","page":"Low-level API","title":"Tempo.utc2tai","text":"utc2tai(utc1, utc2)\n\nTransform a 2-part (quasi) Julian Date, in days, in Coordinate Universal Time, UTC  to a 2-part Julian Date in the International Atomic Time, TAI scale.\n\nnote: Note\nutc1 + utc2 is quasi Julian Date (see Note 2), apportioned in any convenient way between the two arguments, for example such that utc1 is the Julian Day Number and utc2 is the fraction of a day.\n\nnote: Note\nJD cannot unambiguously represent UTC during a leap second unless special measures are taken.  The convention in the present function is that the JD day represents UTC days whether the length is 86399, 86400 or 86401 SI seconds.  \n\nReferences\n\nSeidelmann P. K., (1992), Explanatory Supplement to the Astronomical Almanac,   University Science Books, Section 12.92 (p604).\nMcCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),   IERS Technical Note No. 32, BKG (2004)\nERFA software library\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Leapseconds","page":"Low-level API","title":"Leapseconds","text":"","category":"section"},{"location":"lapi/","page":"Low-level API","title":"Low-level API","text":"Tempo.Leapseconds\nTempo.LEAPSECONDS\nTempo.get_leapseconds\nTempo.leapseconds","category":"page"},{"location":"lapi/#Tempo.Leapseconds","page":"Low-level API","title":"Tempo.Leapseconds","text":"Leapseconds{T}\n\nStores information about the leap seconds that have been added to Coordinated Universal Time  (UTC).\n\nFields\n\nlastupdate: a DatesDateTime object representing the date and time when the Leapseconds    struct was last updated.\njd2000: a vector storing the Julian Date, in days since J2000, of each leap second.\nleap: a vector storing the number of leap seconds at each corresponding entry of the        jd2000 field.\n\n\n\n\n\n","category":"type"},{"location":"lapi/#Tempo.LEAPSECONDS","page":"Low-level API","title":"Tempo.LEAPSECONDS","text":"LEAPSECONDS\n\nLeapseconds data.\n\n\n\n\n\n","category":"constant"},{"location":"lapi/#Tempo.get_leapseconds","page":"Low-level API","title":"Tempo.get_leapseconds","text":"get_leapseconds()\n\nParse leapseconds data and return a Leapseconds type. \n\nnote: Note\nThe leapsecond kernel is retrieved from the artifacts of this package. This artifact  will be updated whenever a new leapsecond is added.\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.leapseconds","page":"Low-level API","title":"Tempo.leapseconds","text":"leapseconds(jd2000::Number)\n\nFor a given UTC date, in Julian days since J2000, calculate Delta(AT) = TAI - UTC.\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Miscellaneous","page":"Low-level API","title":"Miscellaneous","text":"","category":"section"},{"location":"lapi/","page":"Low-level API","title":"Low-level API","text":"Tempo.find_year\nTempo.find_month\nTempo.find_day\nTempo.fraction_of_day\nTempo.fraction_of_second\nTempo.isleapyear\nTempo.lastj2000dayofyear\nTempo.second_in_day","category":"page"},{"location":"lapi/#Tempo.find_year","page":"Low-level API","title":"Tempo.find_year","text":"find_year(d::Integer)\n\nReturn the Gregorian year associated to the given Julian Date day d since J2000.\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.find_month","page":"Low-level API","title":"Tempo.find_month","text":"find_month(dayinyear::Integer, isleap::Bool)\n\nFind the month from the day of the year, depending on whether the year is leap or not.\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.find_day","page":"Low-level API","title":"Tempo.find_day","text":"find_day(dayinyear::Integer, month::Integer, isleap::Bool)\n\nFind the day of the month from the day in the year and the month, depending on whether the  year is leap or not.\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.fraction_of_day","page":"Low-level API","title":"Tempo.fraction_of_day","text":"fraction_of_day(t::Time)\nhms2fd(t::Time)\n\nFind the fraction of the day.\n\nExample\n\njulia> t = Time(12, 30, 40.3424)\n12:30:40.3423\n\njulia> Tempo.fraction_of_day(t)\n0.5213002592592593\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.fraction_of_second","page":"Low-level API","title":"Tempo.fraction_of_second","text":"fraction_of_second(t::Time)\n\nFind the fraction of seconds.\n\nExample\n\njulia> t = Time(12, 30, 40.3424)\n12:30:40.3423\n\njulia> Tempo.fraction_of_second(t)\n0.3423999999999978\n\n\n\n\n\nfraction_of_second(d::DateTime)\n\nGet the fraction of seconds associated to a DateTime object.\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.isleapyear","page":"Low-level API","title":"Tempo.isleapyear","text":"isleapyear(year::Integer)\n\nReturn true if the given Gregorian year is leap.\n\n\n\n\n\nisleapyear(d::Date)\n\nTrue if Date is within a leap year.\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.lastj2000dayofyear","page":"Low-level API","title":"Tempo.lastj2000dayofyear","text":"lastj2000dayofyear(year::Integer)\n\n\n\n\n\n","category":"function"},{"location":"lapi/#Tempo.second_in_day","page":"Low-level API","title":"Tempo.second_in_day","text":"second_in_day(t::Time)\n\nFind the second in the day.\n\nExample\n\njulia> t = Time(12, 30, 40.3424)\n12:30:40.3423\n\njulia> Tempo.second_in_day(t)\n45040.3424\n\n\n\n\n\n","category":"function"},{"location":"tutorials/t01_epochs/#tutorial_01_epochs","page":"Epochs","title":"Epochs Handling and Conversions","text":"","category":"section"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"using Tempo","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"In this tutorial, the general workflow to be followed when dealing with time representations and their transformations is presented. In particular, most of the features of this package are designed around the Epoch data type, which differently from the DateTime object, provides the capability to represent time in different standard and user-define time scales.","category":"page"},{"location":"tutorials/t01_epochs/#Creating-Epochs","page":"Epochs","title":"Creating Epochs","text":"","category":"section"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"Time representions for space applications embed three different concepts: ","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"The representation type (e.g. Gregorian or Julian calendar representation)\nThe origin (e.g. J2000, JD, MJD, ...)\nThe time scale (e.g. TAI, TT, TDB, UTC, UT, ...)","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"All three infromation are considered when building an Epoch. In particular, within Tempo, the (interal) time representation is always based upon the Julian calendar, with the origin fixed at J2000, i.e., the 1st of January 2000 at noon. Different timescales are instead available, with the default one being the TDB. The set of pre-defined time scales supported by this package is: ","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"TT: Terrestrial Time, is a time scale that is used for the prediction or recording of the positions of celestial bodies as measured by an observer on Earth. \nTDB: Barycentric Dynamical Time is a relativistic time scale that is used for the prediction or recording of the positions of celestial bodies relative to the solar system's barycenter.\nTAI: International Atomic Time is a time scale based on the average frequency of a set of atomic clocks.\nTCG: Geocentric Coordinate Time is a relativistic coordinate time scale that is used for precise calculations of objects relative to the Earth. \nTCB: Barycentric Coordinate Time is a relativistic coordinate time scale that is used for precise calculations of objects in the Solar System.\nUTC: Coordinated Universal Time is the primary civil time standard which is kept within one second from the mean solar time (UT1). However, since the rotation of the Earth is irregular, leap seconds are periodically inserted to keep UTC within 0.9 seconds of UT1. \nTDBH: Although TDBH is not an official time scale, it is here used to provide a more accurate transformation between TT and TDB, with a maximum error fo about 10 μs between 1600 and 2200. See Tempo.offset_tt2tdbh for more details. \nGPS: GPS Time is a continuous time scale defined by the GPS Control segment defined as a constant offset of 19s from TAI.","category":"page"},{"location":"tutorials/t01_epochs/#ISO-Strings","page":"Epochs","title":"ISO Strings","text":"","category":"section"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"With this in mind, many different ways are available to create a new Epoch object. The first is based upon the ISO 8601 concept, an international standard to represent dates and times. The desired timescale can be either specified by appending its acronym to the string or as a second argument, as follows:","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e = Epoch(\"2022-01-02T06:30:00.0 TT\")\ne = Epoch(\"2022-01-02T06:30:00.0\")\ne = Epoch(\"2022-01-02T06:30:00.0\", TAI)","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"As you can see, when we did not specify a timescale, TDB has been used by default. The usage of partial ISO strings is also supported:","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e = Epoch(\"2020-01-01\")\n\ne = Epoch(\"2021-01-30T01\")\n\ne = Epoch(\"2022-06-12 UTC\")","category":"page"},{"location":"tutorials/t01_epochs/#Julian-Dates","page":"Epochs","title":"Julian Dates","text":"","category":"section"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"Epoch objects can also be created from Julian Dates, Modified Julian Dates as well as Julian days or seconds since J2000. To parse a Julian Date, in days, the input string must be in the format JD DDDDDDDDD.ffffff:","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e = Epoch(\"JD 2451545.04\")\ne = Epoch(\"JD 2451545.04 TT\")","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"Similarly, for Modified Julian Dates, the string format is MJD DDDDDDDDD.ffffff:","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e = Epoch(\"MJD 51544.54\")\ne = Epoch(\"MJD 51544.54 TT\")","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"When a prefix is not specified, the epoch constructor assumes the input is expressed as Julian days since J2000:","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e = Epoch(\"9.0\")\ne = Epoch(\"9.0 TT\")","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"As you can see, the timescale acronym can always be appended to the predefined string format to override the default time scale. Finally, it is also possible to create an epoch by specifing the number of seconds since J2000. In the latter case, the constructor has a slightly different form and always requires the timescale argument:","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e = Epoch(60.0, TT)\ne = Epoch(60.0, TerrestrialTime)\ne = Epoch{TerrestrialTime}(60.0)","category":"page"},{"location":"tutorials/t01_epochs/#DateTime","page":"Epochs","title":"DateTime","text":"","category":"section"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"Finally, an Epoch can also be constructed from the DateTime object defined within this package:","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"dt = DateTime(2001, 6, 15, 0, 0, 0, 0.0)\ne = Epoch(dt, TT)\ne = Epoch(dt, TerrestrialTime)","category":"page"},{"location":"tutorials/t01_epochs/#Working-with-Epochs","page":"Epochs","title":"Working with Epochs","text":"","category":"section"},{"location":"tutorials/t01_epochs/#Basic-Operations","page":"Epochs","title":"Basic Operations","text":"","category":"section"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"The Epoch type supports a limited subset of basic mathematical and logical operations on it. For example, the offset, in seconds, between two epochs can be computed by subtracting them: ","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e1 = Epoch(90.0, TT)\ne2 = Epoch(50.0, TT)\n\ne1 - e2\n\ne3 = Epoch(40, TAI)\ne1 - e3","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"Notice that this operation can be performed only if the two epochs are defined on the same timescale.","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"Epochs can also be shifted forward and backwards in time by adding or subtracting an arbitrary number of seconds: ","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e1 = Epoch(30.0, TDB)\ne1 += 50\ne1 -= 30.42","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"You can check whether an epoch is greater than an other with the logical operators:","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e1 = Epoch(50.0, UTC)\ne2 = Epoch(50.0, UTC)\n\ne1 > e2 \n\ne1 == e2","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"Again, the operations are supported only if the two epochs belong to the same timescale.","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"Finally, it is also possible to construct ranges with Epochs, with a default timestep of one Julian day. User-defined timesteps are assumed to be expressed in seconds.","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e1 = Epoch(\"2024-01-01T12:00:00\")\n\ne2 = Epoch(\"2024-01-05T12:00:00\")\n\ncollect(e1:e2)\n\ncollect(e1:172800:e2)","category":"page"},{"location":"tutorials/t01_epochs/#Julian-Dates-2","page":"Epochs","title":"Julian Dates","text":"","category":"section"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"A predefined set of functions is also provided to easily convert [Epoch] objects to Julian seconds, days and centuries since J2000:","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e = Epoch(\"2024-01-01T12:00:00 TAI\")\n\nj2000(e)\nj2000s(e)\nj2000c(e)","category":"page"},{"location":"tutorials/t01_epochs/#Converting-Between-Time-Scales","page":"Epochs","title":"Converting Between Time Scales","text":"","category":"section"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"Epoch transformations between the standard and user-defined timescales are simply performed through the convert method by specifying the target time scale","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e = Epoch(90.0, TT)\neTAI = convert(TAI, e)\n\neTCG = convert(TCG, e)","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"These transformations are based on a directed graph of timescales (TIMESCALES) existing within Tempo. Set of functions provide then the offsets in seconds between each pair of connected timescales, offering a simple, effective and efficient way to compute these transformations.","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e = Epoch(90.0, TT)\neTAI = convert(TAI, e)","category":"page"},{"location":"tutorials/t01_epochs/#UTC-and-Leap-Seconds","page":"Epochs","title":"UTC and Leap Seconds","text":"","category":"section"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"A special remark must be made on the conversion between TAI and UTC. The offset between these two timescales is defined by a leap seconds, which are introduced to keep the UTC time scale within 0.9 seconds from UT1. Since the rotation of the Earth is irregular, it is not possible to predict when a new leap second will be introduced in the future. ","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"The latest NAIF's leap second kernel (LSK) is embedded within Tempo as a package artifact, which will be manually updated each time a new kernel is released, so that the user effort is minimised. Indeed, transforming an Epoch from a generic timescale to UTC is a simple as:","category":"page"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"e = Epoch(90.0, TT)\neUTC = convert(UTC, e)","category":"page"},{"location":"tutorials/t01_epochs/#UTC-to-UT1","page":"Epochs","title":"UTC to UT1","text":"","category":"section"},{"location":"tutorials/t01_epochs/","page":"Epochs","title":"Epochs","text":"The offset between UT1 and UTC, which depends upon the rotation of the Earth, is available in the Earth Orientation Parameters (EOP) provided by the International Earth Rotation and Reference System Service (IERS). Since those parameters are also required to compute the orientation of the ITRF with respect to the ICRF, a decision has been made to define the UT1 timescale in FrameTransformations.jl, a different package which enhances Tempo with the capability to transform from and to UT1.","category":"page"},{"location":"tmp/#Overview","page":"-","title":"Overview","text":"","category":"section"},{"location":"tmp/","page":"-","title":"-","text":"There are different ways to represent an epoch within Tempo, depending on the specific application. This section is here to help you choose the proper time representation and to present the capabilities of the module in transforming time between different representations.","category":"page"},{"location":"tmp/","page":"-","title":"-","text":"First of all, there is a deep difference in the way time is thought in the everyday life and  when dealing with space-related applications.  Whenever we say the 12:35 of the 1st of January 2023, we are merging three concepts:  the calendar (1st January 2023) and the time representation (12:35) together with its scale.","category":"page"},{"location":"tmp/","page":"-","title":"-","text":"Calculations in any scientific discipline may involve precise time, but what  sets astronomy apart is the number and variety of time scales that have to be used. In fact, in astronomical applications the physical context of the “clock” matters, whether it is on Earth, moving or stationary, or on a spacecraft.","category":"page"},{"location":"tmp/","page":"-","title":"-","text":"<figure>\n    <img src=\"https://gitlab.com/astronaut-tools/julia/Documentation/-/raw/390f98f53a0d35a3c0963dff8a5f608ff79304db/docs/src/assets/figures/enciclopedia/timescales.png\" alt=\"Image\" width=\"600\" />\n    <figcaption> Time Conversions - The difference in each timescale is shown with \n    respect to TAI. </figcaption>\n</figure>","category":"page"},{"location":"tmp/","page":"-","title":"-","text":"The most relevant time scales for these applications are:","category":"page"},{"location":"tmp/","page":"-","title":"-","text":"UT1 (Universal Time 1): UT1 is a time scale based on the rotation of the Earth.    It is used to measure the positions of celestial objects relative to the Earth's    surface. UT1 is closely related to Greenwich Mean Time (GMT), and the two time    scales are often used interchangeably.\nTAI (International Atomic Time): TAI is a time scale based on the average    frequency of a set of atomic clocks. It is used to measure the positions of    celestial objects relative to the Earth's surface.\nTT (Terrestrial Time): TT is a time scale based on the motion of celestial    objects around the solar system barycenter (the center of mass of the solar system).    It is used to measure the positions of celestial objects relative to the Earth's surface.\nTDB (Barycentric Dynamical Time): TDB is a time scale based on the motion of    celestial objects around the solar system barycenter (the center of mass of the    solar system). It is used to measure the positions of celestial objects relative    to the solar system barycenter.\nTCB (Barycentric Coordinate Time): TCB is a time scale based on the motion of    celestial objects around the solar system barycenter (the center of mass of the    solar system). It is used to measure the positions of celestial objects relative    to the solar system barycenter.\nTCG (Geocentric Coordinate Time): TCG is a time scale based on the rotation of    the Earth. It is used to measure the positions of celestial objects relative to the    Earth's surface.\nTeph (Ephemeris Time): Teph is a time scale based on the motion of celestial    objects around the solar system barycenter (the center of mass of the solar    system). It is used to measure the positions of celestial objects relative to    the solar system barycenter – here considered equivalent of TDB.","category":"page"},{"location":"tmp/","page":"-","title":"-","text":"Of the seven time scales to be described here, one is atomic time (TAI),  one is solar time (UT1), one is an atomic/solar hybrid (UTC) and four are  dynamical times (TT, TCG, TCB, TDB). Other time scales of interest may also be the  ones associated to the different positioning systems. In particular: GPS (Global  Positioning System), GLONASS (Global Navigation Satellite System) and GALILEO  (Global Navigation Satellite System) times could be defined as a constant offset with respect to TAI.","category":"page"},{"location":"tmp/#Time-in-JSMD","page":"-","title":"Time in JSMD","text":"","category":"section"},{"location":"tmp/","page":"-","title":"-","text":"Within Tempo, the way in which time is represented in Tempo is through the use of  Epochs. Epochs are an efficient, differentiable and precise way to represent  astronomical time. To parse an epoch object, two parameters shall be assigned:","category":"page"},{"location":"tmp/","page":"-","title":"-","text":"Timescale: This parameter determines the timescale that the epoch is based on.    For example, it can be set to UTC, TAI, TDB, or TCB. This allows the user to convert    the epoch between different timescales if necessary.\nOrigin: This parameter determines the origin of the epoch, which is the point in time    from which the epoch is measured. This can be in the form of a Julian date, a   Modified Julian date or any user-defined origin.    The origin can also be set to a specific event, such as J2000.0 or B1950.0.","category":"page"},{"location":"tmp/","page":"-","title":"-","text":"By assigning these two parameters, Epochs can be used to represent time in a precise  manner, which is crucial for accurate timekeeping and coordination of events in a universe model.","category":"page"},{"location":"#Welcome-to-Tempo.jl!","page":"Home","title":"Welcome to Tempo.jl!","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Efficient Astronomical Time transformations in Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Tempo.jl is an astronomical library that enables fast, efficient and high-accuracy time transformations between common and user-defined time scales and time representations.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package can be installed using Julia's package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> import Pkg\n\njulia> Pkg.add(\"Tempo.jl\");","category":"page"},{"location":"#Quickstart","page":"Home","title":"Quickstart","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Create an Epoch: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Create an Epoch from an ISO-formatted string\ntai = Epoch(\"2022-10-02T12:04:23.043 TAI\")\n\n# Create an Epoch from a Julian Date\njd = Epoch(\"JD 2451545.0\")\n\n# Create an Epoch from a DateTime object and a timescale\ndt = DateTime(2001, 6, 15, 0, 0, 0, 0.0)\ne = Epoch(dt, TT)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Efficiently transform epochs between various timescales:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Convert an Epoch from TAI to TDB \ntai = Epoch(\"2022-10-02T12:04:23.043 TAI\")\ntdb = convert(TDB, tai)\n\n# Convert an Epoch from TAI to UTC automatically handling leapseconds \nutc = convert(UTC, tai)","category":"page"},{"location":"#Tempo.jl-vs-AstroTime.jl","page":"Home","title":"Tempo.jl vs AstroTime.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tempo.jl and AstroTime.jl are very similar libraries that allow transformations between various astronomical time representations. The major differences are:","category":"page"},{"location":"","page":"Home","title":"Home","text":"AstroTime.jl supports accurate Epoch transformations by leveraging high    precision arithmetics.\nTempo.jl is more efficient when multiple timescales conversions must be    performed to convert a given Epoch (e.g., it does not allocate memory).","category":"page"},{"location":"tutorials/t02_scales/#tutorial_02_scales","page":"Custom Timescales","title":"Creating Custom Timescales","text":"","category":"section"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"In Tempo.jl, all timescales connections and epoch conversions are handled through a directed graph.  A default graph (TIMESCALES), containing a set of predefined timescales is provided by this package. However, this package also provided a set of routines to either extend such graph or create a completely custom one. In this tutorial, we will explore both alternatives.","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"using Tempo","category":"page"},{"location":"tutorials/t02_scales/#Defining-a-New-Timescale","page":"Custom Timescales","title":"Defining a New Timescale","text":"","category":"section"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"Custom timescales can be created with the @timescale macro, which automatically creates the required types and structures, given the timescale acronym, an integer ID and, eventually, the full name of the timescale. ","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"@timescale ET 15 EphemerisTime ","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"The ID is an integer that is internally used to uniquely represent the timescale, whereas the acronym is used to alias such ID. It is also possible to define multiple acronyms associated to the same ID but you cannot assign multiple IDs to the same acronym. In case a full name is not provided, a default one will be built by appending TimeScale to the acronym.","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"warning: Warning\nThe IDs from 1 to 10 are used to define the standard timescales of the package. To avoid unexpected behaviors, custom timescales should be registered with higher IDs.","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"In the previous example, we have created a custom timescale named EphemerisTime, with ID 15. We are now able to define epochs with respect to ET, but we cannot perform conversions towards other timescales until we register it in a graph system:","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"using Tempo \n@timescale ET 15 EphemerisTime","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"ep = Epoch(20.425, ET)\n\nconvert(TT, ep)","category":"page"},{"location":"tutorials/t02_scales/#Extending-the-Default-Graph","page":"Custom Timescales","title":"Extending the Default Graph","text":"","category":"section"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"In this section, the goal is to register ET as a zero-offset scale with respect to TDB. To register this timescale in the default graph, we first need to define the offset functions of ET with respect to TDB: ","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"offset_tdb2et(sec::Number) = 0\noffset_et2tdb(sec::Number) = 0","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"Since we have assumed that the two scales are identical, our functions will always return a zero offset. Rememeber that timescales graph is directed, meaning that if the user desires to go back and forth between two timescales, both transformations must be defined. The input argument of such functions is always the number of seconds since J2000 expressed in the origin timescale.","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"Finally, the add_timescale! method can be used to register ET within the default graph:","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"using Tempo \n@timescale ET 15 EphemerisTime\noffset_tdb2et(sec::Number) = 0\noffset_et2tdb(sec::Number) = 0","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"add_timescale!(TIMESCALES, ET, offset_tdb2et, parent=TDB, ftp=offset_et2tdb)","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"If the inverse transformation (from ET to TDB) is not provided, only one-way epoch conversions will be allowed. We can now check that the desired timescale has been properly registered and performs the same as TDB: ","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"ep = Epoch(\"200.432 TT\")\n\nconvert(TDB, ep)\n\nconvert(ET, ep)","category":"page"},{"location":"tutorials/t02_scales/#Creating-a-Custom-Graph","page":"Custom Timescales","title":"Creating a Custom Graph","text":"","category":"section"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"To create a custom directed graph to handle timescales, Tempo.jl provides the TimeSystem type. Therefore, let us define a new time transformation system called TIMETRANSF:","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"const TIMETRANSF = TimeSystem{Float64}()","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"This object contains a graph and the properties associated to the new time-system defined in TIMETRANSF. At the moment, the computational graph is empty and we need to manually populate it with the new transformations.","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"We begin by creating a new timescale: ","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"@timescale DTS 1 DefaultTimeScale","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"Once created, the new timescale is ready to be registered. If it is the first scale registered in the computational graph, nothing else than the type alias is needed and the registration can be performed as follows:","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"using Tempo \nconst TIMETRANSF = TimeSystem{Float64}()\n\n@timescale DTS 1 DefaultTimeScale\n@timescale NTSA 2 NewTimeScaleA","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"add_timescale!(TIMETRANSF, DTS)\n\nTIMETRANSF.scales.nodes","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"Instead, in case the timescale is linked to a parent one, offset functions shall be defined. In this example, assume we want to register the timescales NTSA and NTSB such that NTSA has DTS as parent and a constant offset of 1 second, whereasNTSB has NTSA as parent and a linear offset with slope of 1/86400.","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"We begin by creating the first timescale:","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"@timescale NTSA 2 NewTimeScaleA","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"We then define its offset functions and register it in TIMETRANSF via the add_timescale! method:","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"const OFFSET_DTS_TO_NTSA = 1.0\noffset_dts2ntsa(sec::Number) = OFFSET_DTS_TO_NTSA\noffset_ntsa2dts(sec::Number) = -OFFSET_DTS_TO_NTSA\n\nadd_timescale!(TIMETRANSF, NTSA, offset_dts2ntsa, parent=DTS, ftp=offset_ntsa2dts)","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"Now, if we have a look to the computational graph, we'll see that NTSA is registered:","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"using Tempo \nconst TIMETRANSF = TimeSystem{Float64}()\n\n@timescale DTS 1 DefaultTimeScale\n@timescale NTSA 2 NewTimeScaleA\n\nconst OFFSET_DTS_TO_NTSA = 1.0\n@inline offset_dts2ntsa(::Number) = OFFSET_DTS_TO_NTSA\n@inline offset_ntsa2dts(::Number) = -OFFSET_DTS_TO_NTSA\n\nadd_timescale!(TIMETRANSF, DTS)\nadd_timescale!(TIMETRANSF, NTSA, offset_dts2ntsa, parent=DTS, ftp=offset_ntsa2dts)","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"TIMETRANSF.scales.nodes","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"If now we create a DTS epoch, we can leverage our custom time transformation system to convert it to an epoch in the NTSA timescale:","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"e = Epoch(0.0, DTS)\n\nconvert(NTSA, e, system=TIMETRANSF)","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"Whenever the conversions are based on a custom time system, the graph must be provided as an additional argument to the convert method. ","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"To conclude the example, we will now add the NTSB scale but only register the NTSA -> NTSB transformation:","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"@timescale NTSB 3 NewTimeScaleB\n\noffset_ntsa2ntsb(sec::Number) = sec/86400.0\nadd_timescale!(TIMETRANSF, NTSB, offset_ntsa2ntsb, parent=NTSA)","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"Now, let's have a look to the nodes in the graph:","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"using Tempo \nconst TIMETRANSF = TimeSystem{Float64}()\n\n@timescale DTS 1 DefaultTimeScale\n@timescale NTSA 2 NewTimeScaleA\n@timescale NTSB 3 NewTimeScaleB\n\nconst OFFSET_DTS_TO_NTSA = 1.0\n@inline offset_dts2ntsa(::Number) = OFFSET_DTS_TO_NTSA\n@inline offset_ntsa2dts(::Number) = -OFFSET_DTS_TO_NTSA\n@inline offset_ntsa2ntsb(sec::Number) = sec/86400.0\n\nadd_timescale!(TIMETRANSF, DTS)\nadd_timescale!(TIMETRANSF, NTSA, offset_dts2ntsa, parent=DTS, ftp=offset_ntsa2dts)\nadd_timescale!(TIMETRANSF, NTSB, offset_ntsa2ntsb, parent=NTSA)\n\ne = Epoch(0.0, DTS)","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"TIMETRANSF.scales.nodes","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"You can see that the new timescale has been registered with the desired integer ID 3. To test the complete system, we will translate forwad of 2 days the previous epoch e and transform it in both timescales: ","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"\ne += 2*86400\n\nea = convert(NTSA, e, system=TIMETRANSF)\n\neb = convert(NTSB, e, system=TIMETRANSF)","category":"page"},{"location":"tutorials/t02_scales/","page":"Custom Timescales","title":"Custom Timescales","text":"As expected, we obtain translations of 1 and 3 seconds, respectively.","category":"page"}]
}
